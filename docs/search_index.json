[["index.html", "scRNAseq Analysis in R with Seurat 1 About", " scRNAseq Analysis in R with Seurat 2022-07-06 1 About Material for scRNAseq analysis in R with Seurat workshop. This workshop follows the introductory Guided Clustering Tutorial tutorial from Seurat. It is also drawing from a similar workshop held by Monash Bioinformatics Platform Single-Cell-Workshop, with material here "],["welcome.html", "2 Welcome", " 2 Welcome Seesion information here "],["schedule.html", "3 Schedule 3.1 Day 1 3.2 Day 2", " 3 Schedule Timetable goes here. 3.1 Day 1 Stuff 3.2 Day 2 More "],["overview.html", "4 Overview", " 4 Overview Discuss background single cell analysis. (slides) "],["seuratobject.html", "5 Using a seurat object", " 5 Using a seurat object Load an existing object Plot some clusters on a umap. Plot some gene expression on a umap plot some gene expression by cluster. Look at a table of cell metadata. Look at counts data / expression data Does gene exist? 5.0.0.1 Discussion: The Seurat Object in R Lets take a look at the seurat object we have just created in R, pbmc To accomodate the complexity of data arising from a single cell RNA seq experiment, the seurat object keeps this as a container of multiple data tables that are linked. The functions in seurat can access parts of the data object for analysis and visualisation, we will cover this later on. There are a couple of concepts to discuss here. Class These are essentially data containers in R as a class, and can accessed as a variable in the R environment. Classes are pre-defined and can contain multiple data tables and metadata. For Seurat, there are three types. Seurat - the main data class, contains all the data. Assay - found within the Seurat object. Depending on the experiment a cell could have data on RNA, ATAC etc measured DimReduc - for PCA and UMAP Slots Slots are parts within a class that contain specific data. These can be lists, data tables and vectors and can be accessed with conventional R methods. Data Access Many of the functions in Seurat operate on the data class and slots within them seamlessly. There maybe occasion to access these separately to hack them, however this is an advanced analysis method. The ways to access the slots can be through methods for the class (functions) or with standard R accessor nomenclature. Examples of accessing a Seurat object The assays slot in pbmc can be accessed with pbmc@assays. The RNA assay can be accessed from this with pbmc@assays$RNA. We often want to access assays, so Seurat nicely gives us a shortcut pbmc$RNA. You may sometimes see an alternative notation pbmc[[\"RNA\"]]. In general, slots that are always in an object are accessed with @ and things that may be different in different data sets are accessed with $. Have a go Use str to look at the structure of the Seurat object pbmc. What is in the meta.data slot within your Seurat object currently? What type of data is contained here? Where is our count data within the Seurat object? "],["load.html", "6 Load data 6.1 Setup the Seurat Object", " 6 Load data Look at the counts files. Load them. Look at the cell metadata (there’s basically none) This workshop follows the introductory Guided Clustering Tutorial tutorial from Seurat. 6.1 Setup the Seurat Object For this tutorial, we will be analyzing the a dataset of Peripheral Blood Mononuclear Cells (PBMC) freely available from 10X Genomics. There are 2,700 single cells that were sequenced on the Illumina NextSeq 500. The raw data can be found here. We start by reading in the data. The Read10X() function reads in the output of the cellranger pipeline from 10X, returning a unique molecular identified (UMI) count matrix. The values in this matrix represent the number of molecules for each feature (i.e. gene; row) that are detected in each cell (column). We next use the count matrix to create a Seurat object. The object serves as a container that contains both data (like the count matrix) and analysis (like PCA, or clustering results) for a single-cell dataset. For a technical discussion of the Seurat object structure, check out the GitHub Wiki. For example, the count matrix is stored in pbmc@assays$RNA@counts. library(dplyr) ## Warning: package &#39;dplyr&#39; was built under R version 4.1.2 ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(ggplot2) ## Warning: package &#39;ggplot2&#39; was built under R version 4.1.2 library(Seurat) ## Warning: package &#39;Seurat&#39; was built under R version 4.1.2 ## Attaching SeuratObject ## Attaching sp library(patchwork) # Load the PBMC dataset pbmc.data &lt;- Read10X(data.dir = &quot;data/pbmc3k/filtered_gene_bc_matrices/hg19/&quot;) # Initialize the Seurat object with the raw (non-normalized data). pbmc &lt;- CreateSeuratObject(counts = pbmc.data, project = &quot;pbmc3k&quot;, min.cells = 3, min.features = 200) ## Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes ## (&#39;-&#39;) pbmc ## An object of class Seurat ## 13714 features across 2700 samples within 1 assay ## Active assay: RNA (13714 features, 0 variable features) What does data in a count matrix look like? # Lets examine a few genes in the first thirty cells pbmc.data[c(&quot;CD3D&quot;,&quot;TCL1A&quot;,&quot;MS4A1&quot;), 1:30] ## 3 x 30 sparse Matrix of class &quot;dgCMatrix&quot; ## [[ suppressing 30 column names &#39;AAACATACAACCAC-1&#39;, &#39;AAACATTGAGCTAC-1&#39;, &#39;AAACATTGATCAGC-1&#39; ... ]] ## ## CD3D 4 . 10 . . 1 2 3 1 . . 2 7 1 . . 1 3 . 2 3 . . . . . 3 4 1 5 ## TCL1A . . . . . . . . 1 . . . . . . . . . . . . 1 . . . . . . . . ## MS4A1 . 6 . . . . . . 1 1 1 . . . . . . . . . 36 1 2 . . 2 . . . . The . values in the matrix represent 0s (no molecules detected). Since most values in an scRNA-seq matrix are 0, Seurat uses a sparse-matrix representation whenever possible. This results in significant memory and speed savings for Drop-seq/inDrop/10x data. dense.size &lt;- object.size(as.matrix(pbmc.data)) dense.size ## 709591472 bytes sparse.size &lt;- object.size(pbmc.data) sparse.size ## 29905192 bytes dense.size / sparse.size ## 23.7 bytes "],["qc.html", "7 QC Filtering 7.1 QC and selecting cells for further analysis", " 7 QC Filtering Discuss counts per cell/gene and make plots Discuss that there’s no one threshold everyone pick a threshold and go filter check numbers of cells. save your object (other qc metrics = Mt gene content, cell cycle asignment, low seq diversity e.t.c) The steps below encompass the standard pre-processing workflow for scRNA-seq data in Seurat. These represent the selection and filtration of cells based on QC metrics, data normalization and scaling, and the detection of highly variable features. 7.1 QC and selecting cells for further analysis Seurat allows you to easily explore QC metrics and filter cells based on any user-defined criteria. A few QC metrics commonly used by the community include The number of unique genes detected in each cell. Low-quality cells or empty droplets will often have very few genes Cell doublets or multiplets may exhibit an aberrantly high gene count Similarly, the total number of molecules detected within a cell (correlates strongly with unique genes) The percentage of reads that map to the mitochondrial genome Low-quality / dying cells often exhibit extensive mitochondrial contamination We calculate mitochondrial QC metrics with the PercentageFeatureSet() function, which calculates the percentage of counts originating from a set of features We use the set of all genes starting with MT- as a set of mitochondrial genes # The $ operator can add columns to object metadata. This is a great place to stash QC stats pbmc$percent.mt &lt;- PercentageFeatureSet(pbmc, pattern = &quot;^MT-&quot;) 7.1.0.1 Challenge: The meta.data slot in the Seurat object Where are QC metrics stored in Seurat? The number of unique genes and total molecules are automatically calculated during CreateSeuratObject() You can find them stored in the object meta data What do you notice has changed within the meta.data table now that we have calculated mitochondrial gene proportion? Could we add more data into the meta.data table? 7.1.1 In the example below, we visualize QC metrics, and use these to filter cells. We filter cells that have unique feature counts over 2,500 or less than 200 We filter cells that have &gt;5% mitochondrial counts #Visualize QC metrics as a violin plot VlnPlot(pbmc, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) # FeatureScatter is typically used to visualize feature-feature relationships, but can be used for anything calculated by the object, i.e. columns in object metadata, PC scores etc. plot1 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot1 + plot2 Lets look at the number of features (genes) to the percent mitochondrial genes plot. plot3 &lt;- FeatureScatter(pbmc, feature1 = &quot;nFeature_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot3 7.1.1.1 Challenge: Ribosomal gene expression as a QC metric Ribosomal gene expression could be another factor to look into your cells within your experiment. Create more columns of metadata using PercentageFeatureSet function, this time search for ribosomal genes. We can calculate the percentage for the large subunit (RPL) and small subunit (RPS) ribosomal genes. Use FeatureScatter to plot combinations of metrics available in metadata. How is the mitochondrial gene percentage related to the ribosomal gene percentage? What can you see? Discuss in break out. Code for challenge Create new meta.data columns to contain percentages of the large and small ribosomal genes. Then plot a scatter plot with this new data. You should find that the large and small ribosomal subunit genes are correlated within cell. What about with mitochondria and gene, feature counts? These are the cells you may want to exclude. Advanced Challenge Highlight cells with very low percentage of ribosomal genes, create a new column in the meta.data table and with FeatureScatter make a plot of the RNA count and mitochondrial percentage with the cells with very low ribosomal gene perentage. 7.1.2 Okay we are happy with our thresholds for mitochondrial percentage in cells, lets apply them and subset our data. This will remove the cells we think are of poor quality. pbmc &lt;- subset(pbmc, subset = nFeature_RNA &gt; 200 &amp; nFeature_RNA &lt; 2500 &amp; percent.mt &lt; 5) Lets replot the feature scatters and see what they look like. plot5 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot6 &lt;- FeatureScatter(pbmc, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) plot5 + plot6 "],["norm.html", "8 Normalisation 8.1 Normalisation", " 8 Normalisation 8.1 Normalisation After removing unwanted cells from the dataset, the next step is to normalize the data. By default, we employ a global-scaling normalization method “LogNormalize” that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. Normalized values are stored in pbmc$RNA@data. pbmc &lt;- NormalizeData(pbmc, normalization.method = &quot;LogNormalize&quot;, scale.factor = 1e4) For clarity, in this previous line of code (and in future commands), we provide the default values for certain parameters in the function call. However, this isn’t required and the same behavior can be achieved with: pbmc &lt;- NormalizeData(pbmc) "],["reducedims.html", "9 Normalisation, PCAs and UMAPs 9.1 Identification of highly variable features (feature selection) 9.2 Scaling the data 9.3 Perform linear dimensional reduction 9.4 Determine the ‘dimensionality’ of the dataset 9.5 Run non-linear dimensional reduction (UMAP/tSNE)", " 9 Normalisation, PCAs and UMAPs why pca how to pick genes for pca why not pca? the blob of not very usefulness. Elbow plots oooh umap. 9.1 Identification of highly variable features (feature selection) We next calculate a subset of features that exhibit high cell-to-cell variation in the dataset (i.e, they are highly expressed in some cells, and lowly expressed in others). We and others have found that focusing on these genes in downstream analysis helps to highlight biological signal in single-cell datasets. Our procedure in Seurat is described in detail here, and improves on previous versions by directly modeling the mean-variance relationship inherent in single-cell data, and is implemented in the FindVariableFeatures() function. By default, we return 2,000 features per dataset. These will be used in downstream analysis, like PCA. pbmc &lt;- FindVariableFeatures(pbmc, selection.method = &#39;vst&#39;, nfeatures = 2000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(pbmc), 10) # plot variable features with and without labels plot1 &lt;- VariableFeaturePlot(pbmc) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) ## When using repel, set xnudge and ynudge to 0 for optimal results plot1 + plot2 ## Warning: Transformation introduced infinite values in continuous x-axis ## Warning: Removed 1 rows containing missing values (geom_point). ## Warning: Transformation introduced infinite values in continuous x-axis ## Warning: Removed 1 rows containing missing values (geom_point). 9.1.0.1 Challenge: Labelling Genes of Interest What if we wanted to look at genes we are specifically interested in? We can create a character vector of gene names and apply that to this plot. Make a plot with labels for the genes IL8, IDH2 and CXCL3. 9.2 Scaling the data Next, we apply a linear transformation (‘scaling’) that is a standard pre-processing step prior to dimensional reduction techniques like PCA. The ScaleData() function: Shifts the expression of each gene, so that the mean expression across cells is 0 Scales the expression of each gene, so that the variance across cells is 1 This step gives equal weight in downstream analyses, so that highly-expressed genes do not dominate The results of this are stored in pbmc$RNA@scale.data all.genes &lt;- rownames(pbmc) pbmc &lt;- ScaleData(pbmc, features = all.genes) ## Centering and scaling data matrix This step takes too long! Can I make it faster? Scaling is an essential step in the Seurat workflow, but only on genes that will be used as input to PCA. Therefore, the default in ScaleData() is only to perform scaling on the previously identified variable features (2,000 by default). To do this, omit the features argument in the previous function call, i.e. # pbmc &lt;- ScaleData(pbmc) Your PCA and clustering results will be unaffected. However, Seurat heatmaps (produced as shown below with DoHeatmap()) require genes in the heatmap to be scaled, to make sure highly-expressed genes don’t dominate the heatmap. To make sure we don’t leave any genes out of the heatmap later, we are scaling all genes in this tutorial.   How can I remove unwanted sources of variation, as in Seurat v2? In Seurat v2 we also use the ScaleData() function to remove unwanted sources of variation from a single-cell dataset. For example, we could ‘regress out’ heterogeneity associated with (for example) cell cycle stage, or mitochondrial contamination. These features are still supported in ScaleData() in Seurat v3, i.e.: # pbmc &lt;- ScaleData(pbmc, vars.to.regress = &#39;percent.mt&#39;) However, particularly for advanced users who would like to use this functionality, we strongly recommend the use of our new normalization workflow, SCTransform(). The method is described in our paper, with a separate vignette using Seurat v3 here. As with ScaleData(), the function SCTransform() also includes a vars.to.regress parameter.   9.3 Perform linear dimensional reduction Next we perform PCA on the scaled data. By default, only the previously determined variable features are used as input, but can be defined using features argument if you wish to choose a different subset. pbmc &lt;- RunPCA(pbmc, features = VariableFeatures(object = pbmc)) ## PC_ 1 ## Positive: CST3, TYROBP, LST1, AIF1, FTL, FTH1, LYZ, FCN1, S100A9, TYMP ## FCER1G, CFD, LGALS1, S100A8, CTSS, LGALS2, SERPINA1, IFITM3, SPI1, CFP ## PSAP, IFI30, SAT1, COTL1, S100A11, NPC2, GRN, LGALS3, GSTP1, PYCARD ## Negative: MALAT1, LTB, IL32, IL7R, CD2, B2M, ACAP1, CD27, STK17A, CTSW ## CD247, GIMAP5, AQP3, CCL5, SELL, TRAF3IP3, GZMA, MAL, CST7, ITM2A ## MYC, GIMAP7, HOPX, BEX2, LDLRAP1, GZMK, ETS1, ZAP70, TNFAIP8, RIC3 ## PC_ 2 ## Positive: CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1, HLA-DRA, LINC00926, CD79B, HLA-DRB1, CD74 ## HLA-DMA, HLA-DPB1, HLA-DQA2, CD37, HLA-DRB5, HLA-DMB, HLA-DPA1, FCRLA, HVCN1, LTB ## BLNK, P2RX5, IGLL5, IRF8, SWAP70, ARHGAP24, FCGR2B, SMIM14, PPP1R14A, C16orf74 ## Negative: NKG7, PRF1, CST7, GZMB, GZMA, FGFBP2, CTSW, GNLY, B2M, SPON2 ## CCL4, GZMH, FCGR3A, CCL5, CD247, XCL2, CLIC3, AKR1C3, SRGN, HOPX ## TTC38, APMAP, CTSC, S100A4, IGFBP7, ANXA1, ID2, IL32, XCL1, RHOC ## PC_ 3 ## Positive: HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1, HLA-DPA1, CD74, MS4A1, HLA-DRB1, HLA-DRA ## HLA-DRB5, HLA-DQA2, TCL1A, LINC00926, HLA-DMB, HLA-DMA, CD37, HVCN1, FCRLA, IRF8 ## PLAC8, BLNK, MALAT1, SMIM14, PLD4, LAT2, IGLL5, P2RX5, SWAP70, FCGR2B ## Negative: PPBP, PF4, SDPR, SPARC, GNG11, NRGN, GP9, RGS18, TUBB1, CLU ## HIST1H2AC, AP001189.4, ITGA2B, CD9, TMEM40, PTCRA, CA2, ACRBP, MMD, TREML1 ## NGFRAP1, F13A1, SEPT5, RUFY1, TSC22D1, MPP1, CMTM5, RP11-367G6.3, MYL9, GP1BA ## PC_ 4 ## Positive: HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1, CD74, HLA-DPB1, HIST1H2AC, PF4, TCL1A ## SDPR, HLA-DPA1, HLA-DRB1, HLA-DQA2, HLA-DRA, PPBP, LINC00926, GNG11, HLA-DRB5, SPARC ## GP9, AP001189.4, CA2, PTCRA, CD9, NRGN, RGS18, GZMB, CLU, TUBB1 ## Negative: VIM, IL7R, S100A6, IL32, S100A8, S100A4, GIMAP7, S100A10, S100A9, MAL ## AQP3, CD2, CD14, FYB, LGALS2, GIMAP4, ANXA1, CD27, FCN1, RBP7 ## LYZ, S100A11, GIMAP5, MS4A6A, S100A12, FOLR3, TRABD2A, AIF1, IL8, IFI6 ## PC_ 5 ## Positive: GZMB, NKG7, S100A8, FGFBP2, GNLY, CCL4, CST7, PRF1, GZMA, SPON2 ## GZMH, S100A9, LGALS2, CCL3, CTSW, XCL2, CD14, CLIC3, S100A12, CCL5 ## RBP7, MS4A6A, GSTP1, FOLR3, IGFBP7, TYROBP, TTC38, AKR1C3, XCL1, HOPX ## Negative: LTB, IL7R, CKB, VIM, MS4A7, AQP3, CYTIP, RP11-290F20.3, SIGLEC10, HMOX1 ## PTGES3, LILRB2, MAL, CD27, HN1, CD2, GDI2, ANXA5, CORO1B, TUBA1B ## FAM110A, ATP1A1, TRADD, PPA1, CCDC109B, ABRACL, CTD-2006K23.1, WARS, VMO1, FYB Seurat provides several useful ways of visualizing both cells and features that define the PCA, including VizDimReduction(), DimPlot(), and DimHeatmap() # Examine and visualize PCA results a few different ways print(pbmc$pca, dims = 1:5, nfeatures = 5) ## PC_ 1 ## Positive: CST3, TYROBP, LST1, AIF1, FTL ## Negative: MALAT1, LTB, IL32, IL7R, CD2 ## PC_ 2 ## Positive: CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1 ## Negative: NKG7, PRF1, CST7, GZMB, GZMA ## PC_ 3 ## Positive: HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1 ## Negative: PPBP, PF4, SDPR, SPARC, GNG11 ## PC_ 4 ## Positive: HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1 ## Negative: VIM, IL7R, S100A6, IL32, S100A8 ## PC_ 5 ## Positive: GZMB, NKG7, S100A8, FGFBP2, GNLY ## Negative: LTB, IL7R, CKB, VIM, MS4A7 VizDimLoadings(pbmc, dims = 1:2, reduction = &#39;pca&#39;) DimPlot(pbmc, reduction = &#39;pca&#39;) In particular DimHeatmap() allows for easy exploration of the primary sources of heterogeneity in a dataset, and can be useful when trying to decide which PCs to include for further downstream analyses. Both cells and features are ordered according to their PCA scores. Setting cells to a number plots the ‘extreme’ cells on both ends of the spectrum, which dramatically speeds plotting for large datasets. Though clearly a supervised analysis, we find this to be a valuable tool for exploring correlated feature sets. DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE) DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE) 9.4 Determine the ‘dimensionality’ of the dataset To overcome the extensive technical noise in any single feature for scRNA-seq data, Seurat clusters cells based on their PCA scores, with each PC essentially representing a ‘metafeature’ that combines information across a correlated feature set. The top principal components therefore represent a robust compression of the dataset. However, how many components should we choose to include? 10? 20? 100? Note: The seurat developers suggest using a JackStraw resampling test to determine this. See Macosko et al, and the original pbmc3 vignette. We’re going to use an Elbow Plot instead here, because its much quicker. An alternative heuristic method generates an ‘Elbow plot’: a ranking of principle components based on the percentage of variance explained by each one (ElbowPlot() function). In this example, we can observe an ‘elbow’ around PC9-10, suggesting that the majority of true signal is captured in the first 10 PCs. ElbowPlot(pbmc) Identifying the true dimensionality of a dataset – can be challenging/uncertain for the user. We therefore suggest these three approaches to consider. The first is more supervised, exploring PCs to determine relevant sources of heterogeneity, and could be used in conjunction with GSEA for example. The second implements a statistical test based on a random null model, but is time-consuming for large datasets, and may not return a clear PC cutoff. The third is a heuristic that is commonly used, and can be calculated instantly. In this example, all three approaches yielded similar results, but we might have been justified in choosing anything between PC 7-12 as a cutoff. We chose 10 here, but encourage users to consider the following: Dendritic cell and NK aficionados may recognize that genes strongly associated with PCs 12 and 13 define rare immune subsets (i.e. MZB1 is a marker for plasmacytoid DCs). However, these groups are so rare, they are difficult to distinguish from background noise for a dataset of this size without prior knowledge. We encourage users to repeat downstream analyses with a different number of PCs (10, 15, or even 50!). As you will observe, the results often do not differ dramatically. We advise users to err on the higher side when choosing this parameter. For example, performing downstream analyses with only 5 PCs does significantly and adversely affect results. 9.5 Run non-linear dimensional reduction (UMAP/tSNE) Seurat offers several non-linear dimensional reduction techniques, such as tSNE and UMAP, to visualize and explore these datasets. The goal of these algorithms is to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space. Cells within the graph-based clusters determined above should co-localize on these dimension reduction plots. As input to the UMAP and tSNE, we suggest using the same PCs as input to the clustering analysis. # If you haven&#39;t installed UMAP, you can do so via reticulate::py_install(packages = &quot;umap-learn&quot;) pbmc &lt;- RunUMAP(pbmc, dims = 1:10) ## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric ## To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; ## This message will be shown once per session ## 20:05:39 UMAP embedding parameters a = 0.9922 b = 1.112 ## 20:05:39 Read 2638 rows and found 10 numeric columns ## 20:05:39 Using Annoy for neighbor search, n_neighbors = 30 ## 20:05:39 Building Annoy index with metric = cosine, n_trees = 50 ## 0% 10 20 30 40 50 60 70 80 90 100% ## [----|----|----|----|----|----|----|----|----|----| ## **************************************************| ## 20:05:39 Writing NN index file to temp file /var/folders/tp/b078yqdd4ydff9fx87lfttpj_sc0x3/T//RtmpaE4Wjo/file6f8f5cdcafe6 ## 20:05:39 Searching Annoy index using 1 thread, search_k = 3000 ## 20:05:40 Annoy recall = 100% ## 20:05:40 Commencing smooth kNN distance calibration using 1 thread ## 20:05:40 Initializing from normalized Laplacian + noise ## 20:05:40 Commencing optimization for 500 epochs, with 105124 positive edges ## 20:05:45 Optimization finished # note that you can set `label = TRUE` or use the LabelClusters function to help label individual clusters DimPlot(pbmc, reduction = &#39;umap&#39;) You can save the object at this point so that it can easily be loaded back in without having to rerun the computationally intensive steps performed above, or easily shared with collaborators. saveRDS(pbmc, file = &quot;pbmc_tutorial.rds&quot;) "],["clustering.html", "10 Clustering", " 10 Clustering Do clustering Choose a resolution What are the clusters? Find cluster markers Name some. "],["cluster-the-cells.html", "11 Cluster the cells", " 11 Cluster the cells Seurat v3 applies a graph-based clustering approach, building upon initial strategies in (Macosko et al). Importantly, the distance metric which drives the clustering analysis (based on previously identified PCs) remains the same. However, our approach to partitioning the cellular distance matrix into clusters has dramatically improved. Our approach was heavily inspired by recent manuscripts which applied graph-based clustering approaches to scRNA-seq data [SNN-Cliq, Xu and Su, Bioinformatics, 2015] and CyTOF data [PhenoGraph, Levine et al., Cell, 2015]. Briefly, these methods embed cells in a graph structure - for example a K-nearest neighbor (KNN) graph, with edges drawn between cells with similar feature expression patterns, and then attempt to partition this graph into highly interconnected ‘quasi-cliques’ or ‘communities’. As in PhenoGraph, we first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the FindNeighbors() function, and takes as input the previously defined dimensionality of the dataset (first 10 PCs). To cluster the cells, we next apply modularity optimization techniques such as the Louvain algorithm (default) or SLM [SLM, Blondel et al., Journal of Statistical Mechanics], to iteratively group cells together, with the goal of optimizing the standard modularity function. The FindClusters() function implements this procedure, and contains a resolution parameter that sets the ‘granularity’ of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells. Optimal resolution often increases for larger datasets. The clusters can be found using the Idents() function. pbmc &lt;- FindNeighbors(pbmc, dims = 1:10) ## Computing nearest neighbor graph ## Computing SNN pbmc &lt;- FindClusters(pbmc, resolution = 0.5) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 2638 ## Number of edges: 95965 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8723 ## Number of communities: 9 ## Elapsed time: 0 seconds # Look at cluster IDs of the first 5 cells head(Idents(pbmc), 5) ## AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 ## 2 3 2 1 ## AAACCGTGTATGCG-1 ## 6 ## Levels: 0 1 2 3 4 5 6 7 8 11.0.0.1 Challenge: Try different cluster settings Run FindNeighbours and FindClusters again, with a different number of dimensions or with a different resolution. Examine the resulting clusters using DimPlot. To maintain the flow of this tutorial, please put the output of this exploration in a different variable, such as pbmc2! "],["cluster-markers.html", "12 Cluster Markers 12.1 Finding differentially expressed features (cluster biomarkers)", " 12 Cluster Markers 12.1 Finding differentially expressed features (cluster biomarkers) Seurat can help you find markers that define clusters via differential expression. By default, it identifies positive and negative markers of a single cluster (specified in ident.1), compared to all other cells. FindAllMarkers() automates this process for all clusters, but you can also test groups of clusters vs. each other, or against all cells. The min.pct argument requires a feature to be detected at a minimum percentage in either of the two groups of cells, and the thresh.test argument requires a feature to be differentially expressed (on average) by some amount between the two groups. You can set both of these to 0, but with a dramatic increase in time - since this will test a large number of features that are unlikely to be highly discriminatory. As another option to speed up these computations, max.cells.per.ident can be set. This will downsample each identity class to have no more cells than whatever this is set to. While there is generally going to be a loss in power, the speed increases can be significant and the most highly differentially expressed features will likely still rise to the top. # find all markers of cluster 2 cluster2.markers &lt;- FindMarkers(pbmc, ident.1 = 2, min.pct = 0.25) head(cluster2.markers, n = 5) ## p_val avg_log2FC pct.1 pct.2 p_val_adj ## IL32 2.593535e-91 1.2154360 0.949 0.466 3.556774e-87 ## LTB 7.994465e-87 1.2828597 0.981 0.644 1.096361e-82 ## CD3D 3.922451e-70 0.9359210 0.922 0.433 5.379250e-66 ## IL7R 1.130870e-66 1.1776027 0.748 0.327 1.550876e-62 ## LDHB 4.082189e-65 0.8837324 0.953 0.614 5.598314e-61 # find all markers distinguishing cluster 5 from clusters 0 and 3 cluster5.markers &lt;- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25) head(cluster5.markers, n = 5) ## p_val avg_log2FC pct.1 pct.2 p_val_adj ## FCGR3A 2.150929e-209 4.267579 0.975 0.039 2.949784e-205 ## IFITM3 6.103366e-199 3.877105 0.975 0.048 8.370156e-195 ## CFD 8.891428e-198 3.411039 0.938 0.037 1.219370e-193 ## CD68 2.374425e-194 3.014535 0.926 0.035 3.256286e-190 ## RP11-290F20.3 9.308287e-191 2.722684 0.840 0.016 1.276538e-186 # find markers for every cluster compared to all remaining cells, report only the positive ones pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) ## Calculating cluster 0 ## Calculating cluster 1 ## Calculating cluster 2 ## Calculating cluster 3 ## Calculating cluster 4 ## Calculating cluster 5 ## Calculating cluster 6 ## Calculating cluster 7 ## Calculating cluster 8 pbmc.markers %&gt;% group_by(cluster) %&gt;% slice_max(n = 2, order_by = avg_log2FC) ## # A tibble: 18 × 7 ## # Groups: cluster [9] ## p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; ## 1 1.17e- 83 1.33 0.435 0.108 1.60e- 79 0 CCR7 ## 2 1.74e-109 1.07 0.897 0.593 2.39e-105 0 LDHB ## 3 0 5.57 0.996 0.215 0 1 S100A9 ## 4 0 5.48 0.975 0.121 0 1 S100A8 ## 5 7.99e- 87 1.28 0.981 0.644 1.10e- 82 2 LTB ## 6 2.61e- 59 1.24 0.424 0.111 3.58e- 55 2 AQP3 ## 7 0 4.31 0.936 0.041 0 3 CD79A ## 8 9.48e-271 3.59 0.622 0.022 1.30e-266 3 TCL1A ## 9 4.93e-169 3.01 0.595 0.056 6.76e-165 4 GZMK ## 10 1.17e-178 2.97 0.957 0.241 1.60e-174 4 CCL5 ## 11 3.51e-184 3.31 0.975 0.134 4.82e-180 5 FCGR3A ## 12 2.03e-125 3.09 1 0.315 2.78e-121 5 LST1 ## 13 6.82e-175 4.92 0.958 0.135 9.36e-171 6 GNLY ## 14 1.05e-265 4.89 0.986 0.071 1.44e-261 6 GZMB ## 15 1.48e-220 3.87 0.812 0.011 2.03e-216 7 FCER1A ## 16 1.67e- 21 2.87 1 0.513 2.28e- 17 7 HLA-DPB1 ## 17 3.68e-110 8.58 1 0.024 5.05e-106 8 PPBP ## 18 7.73e-200 7.24 1 0.01 1.06e-195 8 PF4 Seurat has several tests for differential expression which can be set with the test.use parameter (see our DE vignette for details). For example, the ROC test returns the ‘classification power’ abs(AUC-0.5)*2 for any individual marker, ranging from 0 = random to 1 = perfect. cluster0.markers &lt;- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = &quot;roc&quot;, only.pos = TRUE) We include several tools for visualizing marker expression. VlnPlot() (shows expression probability distributions across clusters), and FeaturePlot() (visualizes feature expression on a tSNE or PCA plot) are our most commonly used visualizations. We also suggest exploring RidgePlot(), CellScatter(), and DotPlot() as additional methods to view your dataset. VlnPlot(pbmc, features = c(&quot;MS4A1&quot;, &quot;CD79A&quot;)) # you can plot raw counts as well VlnPlot(pbmc, features = c(&quot;NKG7&quot;, &quot;PF4&quot;), slot = &#39;counts&#39;, log = TRUE) FeaturePlot(pbmc, features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;)) Other useful plots These are ridgeplots, cell scatter plots and dotplots. Replace FeaturePlot with the other functions. RidgePlot(pbmc, features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;)) ## Picking joint bandwidth of 0.0236 ## Picking joint bandwidth of 0.0971 ## Picking joint bandwidth of 0.125 ## Picking joint bandwidth of 0.0337 ## Picking joint bandwidth of 0.0659 ## Picking joint bandwidth of 0.0872 ## Picking joint bandwidth of 0.319 ## Picking joint bandwidth of 0.033 ## Picking joint bandwidth of 0.0368 For CellScatter plots, will need the cell id of the cells you want to look at. You can get this from the cell metadata (pbmc@meta.data). head( pbmc@meta.data ) ## orig.ident nCount_RNA nFeature_RNA percent.mt RNA_snn_res.0.5 ## AAACATACAACCAC-1 pbmc3k 2419 779 3.0177759 2 ## AAACATTGAGCTAC-1 pbmc3k 4903 1352 3.7935958 3 ## AAACATTGATCAGC-1 pbmc3k 3147 1129 0.8897363 2 ## AAACCGTGCTTCCG-1 pbmc3k 2639 960 1.7430845 1 ## AAACCGTGTATGCG-1 pbmc3k 980 521 1.2244898 6 ## AAACGCACTGGTAC-1 pbmc3k 2163 781 1.6643551 2 ## seurat_clusters ## AAACATACAACCAC-1 2 ## AAACATTGAGCTAC-1 3 ## AAACATTGATCAGC-1 2 ## AAACCGTGCTTCCG-1 1 ## AAACCGTGTATGCG-1 6 ## AAACGCACTGGTAC-1 2 CellScatter(pbmc, cell1 = &quot;AAACATACAACCAC-1&quot;, cell2 = &quot;AAACATTGAGCTAC-1&quot;) DotPlots DotPlot(pbmc, features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;)) Which plots do you prefer? Discuss. DoHeatmap() generates an expression heatmap for given cells and features. In this case, we are plotting the top 20 markers (or all markers if less than 20) for each cluster. top10 &lt;- pbmc.markers %&gt;% group_by(cluster) %&gt;% top_n(n = 10, wt = avg_log2FC) DoHeatmap(pbmc, features = top10$gene) + NoLegend() "],["assigning-cell-type-identity-to-clusters.html", "13 Assigning cell type identity to clusters", " 13 Assigning cell type identity to clusters Fortunately in the case of this dataset, we can use canonical markers to easily match the unbiased clustering to known cell types: Cluster ID Markers Cell Type 0 IL7R, CCR7 Naive CD4+ T 1 CD14, LYZ CD14+ Mono 2 IL7R, S100A4 Memory CD4+ 3 MS4A1 B 4 CD8A CD8+ T 5 FCGR3A, MS4A7 FCGR3A+ Mono 6 GNLY, NKG7 NK 7 FCER1A, CST3 DC 8 PPBP Platelet new.cluster.ids &lt;- c(&quot;Naive CD4 T&quot;, &quot;CD14+ Mono&quot;, &quot;Memory CD4 T&quot;, &quot;B&quot;, &quot;CD8 T&quot;, &quot;FCGR3A+ Mono&quot;, &quot;NK&quot;, &quot;DC&quot;, &quot;Platelet&quot;) names(new.cluster.ids) &lt;- levels(pbmc) pbmc &lt;- RenameIdents(pbmc, new.cluster.ids) DimPlot(pbmc, reduction = &#39;umap&#39;, label = TRUE, pt.size = 0.5) + NoLegend() saveRDS(pbmc, file = &quot;pbmc3k_final.rds&quot;) "],["singler.html", "14 SingleR", " 14 SingleR #install.packages(&quot;BiocManager&quot;) #BiocManager::install(c(&quot;SingleCellExperiment&quot;,&quot;SingleR&quot;,&quot;celldex&quot;),ask=F) library(SingleCellExperiment) ## Warning: package &#39;SingleCellExperiment&#39; was built under R version 4.1.1 ## Loading required package: SummarizedExperiment ## Warning: package &#39;SummarizedExperiment&#39; was built under R version 4.1.1 ## Loading required package: MatrixGenerics ## Warning: package &#39;MatrixGenerics&#39; was built under R version 4.1.1 ## Loading required package: matrixStats ## ## Attaching package: &#39;matrixStats&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## count ## ## Attaching package: &#39;MatrixGenerics&#39; ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ## colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ## colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ## colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ## colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ## colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ## colWeightedMeans, colWeightedMedians, colWeightedSds, ## colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ## rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ## rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ## rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ## rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ## rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ## rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ## rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Warning: package &#39;GenomicRanges&#39; was built under R version 4.1.2 ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Warning: package &#39;BiocGenerics&#39; was built under R version 4.1.1 ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## combine, intersect, setdiff, union ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, ## dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ## order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ## rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ## union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ## Warning: package &#39;S4Vectors&#39; was built under R version 4.1.3 ## ## Attaching package: &#39;S4Vectors&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## first, rename ## The following objects are masked from &#39;package:base&#39;: ## ## expand.grid, I, unname ## Loading required package: IRanges ## Warning: package &#39;IRanges&#39; was built under R version 4.1.1 ## ## Attaching package: &#39;IRanges&#39; ## The following object is masked from &#39;package:sp&#39;: ## ## %over% ## The following objects are masked from &#39;package:dplyr&#39;: ## ## collapse, desc, slice ## Loading required package: GenomeInfoDb ## Warning: package &#39;GenomeInfoDb&#39; was built under R version 4.1.2 ## Loading required package: Biobase ## Warning: package &#39;Biobase&#39; was built under R version 4.1.1 ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## ## Attaching package: &#39;Biobase&#39; ## The following object is masked from &#39;package:MatrixGenerics&#39;: ## ## rowMedians ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## anyMissing, rowMedians ## ## Attaching package: &#39;SummarizedExperiment&#39; ## The following object is masked from &#39;package:SeuratObject&#39;: ## ## Assays ## The following object is masked from &#39;package:Seurat&#39;: ## ## Assays library(SingleR) ## Warning: package &#39;SingleR&#39; was built under R version 4.1.2 library(celldex) ## ## Attaching package: &#39;celldex&#39; ## The following objects are masked from &#39;package:SingleR&#39;: ## ## BlueprintEncodeData, DatabaseImmuneCellExpressionData, ## HumanPrimaryCellAtlasData, ImmGenData, MonacoImmuneData, ## MouseRNAseqData, NovershternHematopoieticData In this workshop we have focused on the Seurat package. However, there is another whole ecosystem of R packages for single cell analysis within Bioconductor. We won’t go into any detail on these packages in this workshop, but there is good material describing the object type online : OSCA. For now, we’ll just convert our Seurat object into an object called SingleCellExperiment. Some popular packages from Bioconductor that work with this type are Slingshot, Scran, Scater. sce &lt;- as.SingleCellExperiment(pbmc) We will now use a package called SingleR to label each cell. SingleR uses a reference data set of cell types with expression data to infer the best label for each cell. A convenient collection of cell type reference is in the celldex package which currently contains the follow sets: ls(&#39;package:celldex&#39;) ## [1] &quot;BlueprintEncodeData&quot; &quot;DatabaseImmuneCellExpressionData&quot; ## [3] &quot;HumanPrimaryCellAtlasData&quot; &quot;ImmGenData&quot; ## [5] &quot;MonacoImmuneData&quot; &quot;MouseRNAseqData&quot; ## [7] &quot;NovershternHematopoieticData&quot; In this example, we’ll use the HumanPrimaryCellAtlasData set, which contains high-level, and fine-grained label types. Lets download the reference dataset ref.set &lt;- celldex::HumanPrimaryCellAtlasData() ## snapshotDate(): 2021-10-19 ## see ?celldex and browseVignettes(&#39;celldex&#39;) for documentation ## loading from cache ## see ?celldex and browseVignettes(&#39;celldex&#39;) for documentation ## loading from cache head(unique(ref.set$label.main)) ## [1] &quot;DC&quot; &quot;Smooth_muscle_cells&quot; &quot;Epithelial_cells&quot; ## [4] &quot;B_cell&quot; &quot;Neutrophils&quot; &quot;T_cells&quot; An example of the types of “fine” labels. head(unique(ref.set$label.fine)) ## [1] &quot;DC:monocyte-derived:immature&quot; &quot;DC:monocyte-derived:Galectin-1&quot; ## [3] &quot;DC:monocyte-derived:LPS&quot; &quot;DC:monocyte-derived&quot; ## [5] &quot;Smooth_muscle_cells:bronchial:vit_D&quot; &quot;Smooth_muscle_cells:bronchial&quot; Now we’ll label our cells using the SingleCellExperiment object, with the above reference set. pred.cnts &lt;- SingleR::SingleR(test = sce, ref = ref.set, labels = ref.set$label.main) Keep any types that have more than 10 cells to the label, and put those labels back on our Seurat object and plot our on our umap. lbls.keep &lt;- table(pred.cnts$first.labels)&gt;10 pbmc$SingleR.labels &lt;- ifelse(lbls.keep[pred.cnts$first.labels], pred.cnts$first.labels, &#39;Other&#39;) DimPlot(pbmc, reduction=&#39;umap&#39;, group.by=&#39;SingleR.labels&#39;) It is nice to see that SingleR does not use the clusters we computed earlier, but the labels do seem to match those clusters reasonably well. "],["de.html", "15 DE", " 15 DE Discussion of pseudobulk, contrasted with wilxcox test Would run as demo. Needs a new and different dataset with replicates, and alog of mucking about. ################################################################################ # Pseudobulk demo library(SeuratData) library(Seurat) library(tidyverse) library(patchwork) ################################################################################ # Prepare a datasets library(SeuratData) data(&quot;hcabm40k&quot;) #maybe? # grab 4000 random cells keep_cells &lt;- sample(1:ncol(hcabm40k), size=4000) # Subsample down to a toy sized dataset hcabm40k.mini &lt;- hcabm40k[1:2000,keep_cells] # clear large object from memory rm(hcabm40k) # Add a group of contidion vs control to test. Not real # This is the first 4 of 8 bio replicates condition_lookup &lt;- c(&#39;MantonBM1&#39;=&quot;fake_treat&quot;, &#39;MantonBM2&#39;=&quot;fake_treat&quot;, &#39;MantonBM3&#39;=&quot;fake_treat&quot;, &#39;MantonBM4&#39;=&quot;fake_treat&quot;, &#39;MantonBM5&#39;=&quot;fake_control&quot;, &#39;MantonBM6&#39;=&quot;fake_control&quot;, &#39;MantonBM7&#39;=&quot;fake_control&quot;, &#39;MantonBM8&#39;=&quot;fake_control&quot;) hcabm40k.mini$condition &lt;- condition_lookup[hcabm40k.mini@meta.data$orig.ident] table( hcabm40k.mini@meta.data$orig.ident, hcabm40k.mini$condition) # When Diing DE, it makes sense to remove genes with too-low counts to find anything in. # There&#39;s alot of these in single cell. total_per_gene &lt;- rowSums(GetAssayData(hcabm40k.mini, &#39;counts&#39;)) hist(log10(total_per_gene)) hcabm40k.mini &lt;- hcabm40k.mini[total_per_gene &gt;= 100, ] # ADDING SOME FAKE VARIATION! # This only works because this data is ordered by the samples! # multipling first 5 genes of the the &#39;fake treat&#39; group by 4 - so we expect these to be DE. # when in reality, these are simply healthy replicates and shouldn&#39;t be significantly different alter_cells &lt;- which(condition_lookup[hcabm40k.mini$orig.ident] == &quot;fake_treat&quot;) hcabm40k.mini@assays$RNA@counts[1:20, alter_cells ] &lt;- hcabm40k.mini@assays$RNA@counts[1:20, alter_cells ]* 2 alter_genes &lt;- rownames(hcabm40k.mini@assays$RNA@counts)[1:20] #------------------------------------------------------------------------------- # Run thorough a basic processing, with no QC hcabm40k.mini &lt;- NormalizeData(hcabm40k.mini, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) hcabm40k.mini &lt;- FindVariableFeatures(hcabm40k.mini, selection.method = &quot;vst&quot;, nfeatures = 2000) all.genes &lt;- rownames(hcabm40k.mini) hcabm40k.mini &lt;- ScaleData(hcabm40k.mini, features = all.genes) hcabm40k.mini &lt;- RunPCA(hcabm40k.mini, features = VariableFeatures(object = hcabm40k.mini)) hcabm40k.mini &lt;- RunUMAP(hcabm40k.mini, dims = 1:10) hcabm40k.mini &lt;- FindNeighbors(hcabm40k.mini, dims = 1:10) hcabm40k.mini &lt;- FindClusters(hcabm40k.mini, resolution = 0.1) # Low res #------------------------------------------------------------------------------- # The object; p1 &lt;- DimPlot(hcabm40k.mini, reduction = &#39;umap&#39;, group.by = &#39;seurat_clusters&#39;) p2 &lt;- DimPlot(hcabm40k.mini, reduction = &#39;umap&#39;, group.by = &#39;orig.ident&#39;) p1+p2 ################################################################################ # What is different between &#39;fake treat&#39; and &#39;fake control&#39;? # Expect the 20 genes that we altered, but little else #------------------------------------------------------------------------------- # Find all markers hcabm40k.mini.c0 &lt;- hcabm40k.mini[, hcabm40k.mini$seurat_clusters == 0] # Change Ident to condition Idents(hcabm40k.mini.c0) Idents(hcabm40k.mini.c0) &lt;- hcabm40k.mini.c0$condition # default, wilcox test de_result_wilcox &lt;- FindMarkers(hcabm40k.mini.c0, ident.1 = &#39;fake_treat&#39;, ident.2 = &#39;fake_control&#39;, logfc.threshold = 0, # Give me ALL results min.pct = 0 ) # the &#39;DE&#39; genes de_result_wilcox$was_altered &lt;- rownames(de_result_wilcox ) %in% alter_genes filter(de_result_wilcox, p_val_adj &lt; 0.01) #&gt; filter(de_result_wilcox, p_val_adj &lt; 0.01) #p_val avg_log2FC pct.1 pct.2 p_val_adj #JUN 5.200733e-34 -0.75819184 0.593 0.779 5.138324e-31 #RPS8 2.630468e-08 -0.15303403 0.996 0.996 2.598902e-05 #RPS27 1.982738e-07 -0.09901833 0.999 0.999 1.958945e-04 #YBX1 3.822587e-07 0.27747948 0.798 0.711 3.776716e-04 #RPL11 1.287260e-06 -0.11034247 0.998 0.998 1.271813e-03 #FCGR3A 1.355810e-06 0.67263878 0.097 0.044 1.339541e-03 #SNAP47 3.074629e-06 1.06663146 0.072 0.029 3.037734e-03 #CHRM3-AS2 4.247678e-06 -0.90931480 0.042 0.091 4.196705e-03 #RPS7 8.027267e-06 -0.11818369 0.990 0.995 7.930940e-03 filter(de_result_wilcox, p_val_adj &lt; 0.01) filter(de_result_wilcox, was_altered == TRUE) #------------------------------------------------------------------------------- # Pseudobuilk # Change idents to sample fro grouping. levels(Idents(hcabm40k.mini.c0)) Idents(hcabm40k.mini.c0) &lt;- hcabm40k.mini.c0$orig.ident levels(Idents(hcabm40k.mini.c0)) pseudobulk_matrix &lt;- AggregateExpression( hcabm40k.mini.c0, slot = &#39;counts&#39;, assays=&#39;RNA&#39; )[[&#39;RNA&#39;]] # treat like a bulk DE library(limma) library(edgeR) dge &lt;- DGEList(pseudobulk_matrix) dge &lt;- calcNormFactors(dge) condition &lt;- factor(condition_lookup[colnames(pseudobulk_matrix)]) design &lt;- model.matrix(~condition) vm &lt;- voom(dge, design = design, plot = TRUE) fit &lt;- lmFit(vm, design = design) fit &lt;- eBayes(fit) de_result_pseudobulk &lt;- topTable(fit, n = Inf, adjust.method = &quot;BH&quot;) de_result_pseudobulk &lt;- arrange(de_result_pseudobulk , adj.P.Val) de_result_pseudobulk$was_altered &lt;- rownames(de_result_pseudobulk ) %in% alter_genes filter(de_result_pseudobulk, adj.P.Val &lt; 0.01) filter(de_result_pseudobulk, was_altered == TRUE) #----------------------------------------------------------- p1 &lt;- ggplot(de_result_pseudobulk, aes(x=AveExpr, y=logFC, col=adj.P.Val &lt; 0.5)) + geom_point() + geom_point(data=filter(de_result_pseudobulk, was_altered), pch=3, col=&#39;blue&#39;, size=5 ) + scale_colour_manual(values=c(&#39;TRUE&#39;=&quot;red&quot;,&#39;FALSE&#39;=&quot;black&quot;)) + theme_bw() + ggtitle(&quot;Pseudobulk&quot;) # Seurat doesn&#39;t give aveg expression by default, just grab it from the psuedobulk de_result_wilcox$AveExpr &lt;- de_result_pseudobulk[rownames(de_result_wilcox),c(&#39;AveExpr&#39;)] p2 &lt;- ggplot(de_result_wilcox, aes(x=AveExpr, y=avg_log2FC, col=p_val_adj &lt; 0.5)) + geom_point() + geom_point(data=filter(de_result_wilcox, was_altered), pch=3, col=&#39;blue&#39;, size=5 ) + scale_colour_manual(values=c(&#39;TRUE&#39;=&quot;red&quot;,&#39;FALSE&#39;=&quot;black&quot;)) + theme_bw() + ggtitle(&quot;Wilcox Test&quot;) p1 + p2 "],["finishing-up.html", "16 Finishing up", " 16 Finishing up "],["resources.html", "17 Resources", " 17 Resources Useful resources for next steps. Many Seurat Vignettes: https://satijalab.org/seurat/index.html Ochestrating Single Cell Analysis with bioconductor: https://bioconductor.org/books/release/OSCA/ Bunch of useful links listed here: https://monashbioinformaticsplatform.github.io/Single-Cell-Workshop/ TidySeurat tidyverse singleR celldex library(SingleCellExperiment) library(SingleR) library(celldex) For monocle: (not done.) remotes::install_github(‘satijalab/seurat-wrappers’) onfigure: error: gdal-config not found or not executable. remotes::install_github(‘rspatial/terra’) devtools::install_github(‘cole-trapnell-lab/monocle3’) "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
