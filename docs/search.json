[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"Material scRNAseq analysis R Seurat workshop.workshop follows introductory Guided Clustering Tutorial tutorial Seurat.also drawing similar workshop held Monash Bioinformatics Platform Single-Cell-Workshop, material \n","code":""},{"path":"schedule.html","id":"schedule","chapter":"2 Schedule","heading":"2 Schedule","text":"","code":""},{"path":"schedule.html","id":"day-2","chapter":"2 Schedule","heading":"Day 2","text":"","code":""},{"path":"schedule.html","id":"day-2-1","chapter":"2 Schedule","heading":"Day 2","text":"","code":""},{"path":"seuratobject.html","id":"seuratobject","chapter":"3 The Seurat object","heading":"3 The Seurat object","text":"todays workshop following Seurat PBMC tutorial (reproduced next section).\n’ll load raw counts data, QC setup various useful information Seurat object.- Seurat object look like, can ’ve made one?Lets look Seurat object ’s already setup.","code":""},{"path":"seuratobject.html","id":"load-an-existing-seurat-object","chapter":"3 The Seurat object","heading":"3.1 Load an existing Seurat object","text":"data ’re working today small dataset 3000 PBMCs (peripheral blood mononuclear cells) healthy donor. Just one sample.early demo dataset 10X genomics (called pbmc3k) - can find information like qc reports .First, load Seurat package.’s one prepared earlier. Seurat objects usually saved ‘.rds’ files, R format storing binary data (-text human-readable). functions readRDS() can load .","code":"\nlibrary(Seurat)\npbmc_processed <- readRDS(\"data/pbmc_tutorial.rds\")\npbmc_processed\n#> An object of class Seurat \n#> 13714 features across 2700 samples within 1 assay \n#> Active assay: RNA (13714 features, 2000 variable features)\n#>  2 dimensional reductions calculated: pca, umap"},{"path":"seuratobject.html","id":"whats-in-there","chapter":"3 The Seurat object","heading":"3.2 What’s in there?","text":"important information working Seurat objects metadata.\ncell level information - row one cell, identified barcode.\nExtra information gets added table analysis progresses.doesn’t gene expression though, ’s stored ‘Assay’.\nAssay structure nuances (see discussion ), functions get assay data .default object return normalised data (assay object, called RNA). Every ‘.’ zero.raw counts data accessible .Seurat generally hides alot data complexity, provides functions typical tasks. Like plotting.","code":"\nhead(pbmc_processed@meta.data)\n#>                  orig.ident nCount_RNA nFeature_RNA\n#> AAACATACAACCAC-1     pbmc3k       2419          779\n#> AAACATTGAGCTAC-1     pbmc3k       4903         1352\n#> AAACATTGATCAGC-1     pbmc3k       3147         1129\n#> AAACCGTGCTTCCG-1     pbmc3k       2639          960\n#> AAACCGTGTATGCG-1     pbmc3k        980          521\n#> AAACGCACTGGTAC-1     pbmc3k       2163          781\n#>                  percent.mt RNA_snn_res.0.5 seurat_clusters\n#> AAACATACAACCAC-1  3.0177759               0               0\n#> AAACATTGAGCTAC-1  3.7935958               3               3\n#> AAACATTGATCAGC-1  0.8897363               2               2\n#> AAACCGTGCTTCCG-1  1.7430845               5               5\n#> AAACCGTGTATGCG-1  1.2244898               6               6\n#> AAACGCACTGGTAC-1  1.6643551               2               2\nGetAssayData(pbmc_processed)[1:15,1:5]\n#> 15 x 5 sparse Matrix of class \"dgCMatrix\"\n#>               AAACATACAACCAC-1 AAACATTGAGCTAC-1\n#> AL627309.1                   .         .       \n#> AP006222.2                   .         .       \n#> RP11-206L10.2                .         .       \n#> RP11-206L10.9                .         .       \n#> LINC00115                    .         .       \n#> NOC2L                        .         .       \n#> KLHL17                       .         .       \n#> PLEKHN1                      .         .       \n#> RP11-54O7.17                 .         .       \n#> HES4                         .         .       \n#> RP11-54O7.11                 .         .       \n#> ISG15                        .         .       \n#> AGRN                         .         .       \n#> C1orf159                     .         .       \n#> TNFRSF18                     .         1.625141\n#>               AAACATTGATCAGC-1 AAACCGTGCTTCCG-1\n#> AL627309.1            .                 .      \n#> AP006222.2            .                 .      \n#> RP11-206L10.2         .                 .      \n#> RP11-206L10.9         .                 .      \n#> LINC00115             .                 .      \n#> NOC2L                 .                 .      \n#> KLHL17                .                 .      \n#> PLEKHN1               .                 .      \n#> RP11-54O7.17          .                 .      \n#> HES4                  .                 .      \n#> RP11-54O7.11          .                 .      \n#> ISG15                 1.429744          3.55831\n#> AGRN                  .                 .      \n#> C1orf159              .                 .      \n#> TNFRSF18              .                 .      \n#>               AAACCGTGTATGCG-1\n#> AL627309.1                   .\n#> AP006222.2                   .\n#> RP11-206L10.2                .\n#> RP11-206L10.9                .\n#> LINC00115                    .\n#> NOC2L                        .\n#> KLHL17                       .\n#> PLEKHN1                      .\n#> RP11-54O7.17                 .\n#> HES4                         .\n#> RP11-54O7.11                 .\n#> ISG15                        .\n#> AGRN                         .\n#> C1orf159                     .\n#> TNFRSF18                     .\nGetAssayData(pbmc_processed, slot='counts')[1:15,1:5]\n#> 15 x 5 sparse Matrix of class \"dgCMatrix\"\n#>               AAACATACAACCAC-1 AAACATTGAGCTAC-1\n#> AL627309.1                   .                .\n#> AP006222.2                   .                .\n#> RP11-206L10.2                .                .\n#> RP11-206L10.9                .                .\n#> LINC00115                    .                .\n#> NOC2L                        .                .\n#> KLHL17                       .                .\n#> PLEKHN1                      .                .\n#> RP11-54O7.17                 .                .\n#> HES4                         .                .\n#> RP11-54O7.11                 .                .\n#> ISG15                        .                .\n#> AGRN                         .                .\n#> C1orf159                     .                .\n#> TNFRSF18                     .                2\n#>               AAACATTGATCAGC-1 AAACCGTGCTTCCG-1\n#> AL627309.1                   .                .\n#> AP006222.2                   .                .\n#> RP11-206L10.2                .                .\n#> RP11-206L10.9                .                .\n#> LINC00115                    .                .\n#> NOC2L                        .                .\n#> KLHL17                       .                .\n#> PLEKHN1                      .                .\n#> RP11-54O7.17                 .                .\n#> HES4                         .                .\n#> RP11-54O7.11                 .                .\n#> ISG15                        1                9\n#> AGRN                         .                .\n#> C1orf159                     .                .\n#> TNFRSF18                     .                .\n#>               AAACCGTGTATGCG-1\n#> AL627309.1                   .\n#> AP006222.2                   .\n#> RP11-206L10.2                .\n#> RP11-206L10.9                .\n#> LINC00115                    .\n#> NOC2L                        .\n#> KLHL17                       .\n#> PLEKHN1                      .\n#> RP11-54O7.17                 .\n#> HES4                         .\n#> RP11-54O7.11                 .\n#> ISG15                        .\n#> AGRN                         .\n#> C1orf159                     .\n#> TNFRSF18                     ."},{"path":"seuratobject.html","id":"plotting","chapter":"3 The Seurat object","heading":"3.3 Plotting","text":"Lets plot classic UMAP DimPlot- defaults clusters ‘umap’ view.checking gene expression? Genes called ‘features’ Seurat object (CITE-seq ’d proteins!). FeaturePlot() function show gene expression.also works continuous cell-level data - column metadata table.showing CD14 expression across clusters (categorical information metadata)","code":"\nDimPlot(pbmc_processed)\n# equivalent to\n#DimPlot(pbmc_processed, reduction = 'umap')\nFeaturePlot(pbmc_processed, features =  \"CD14\")\nFeaturePlot(pbmc_processed, features =  \"percent.mt\")\nVlnPlot(pbmc_processed, features = 'CD14')"},{"path":"seuratobject.html","id":"challenge-plotting","chapter":"3 The Seurat object","heading":"Challenge: Plotting","text":"Plot favourite gene. cluster found ?Tip: can check gene dataset looking rownames seurat object \"CCT3\" %% rownames(pbmc_processed)","code":""},{"path":"seuratobject.html","id":"discussion-the-seurat-object-in-r","chapter":"3 The Seurat object","heading":"Discussion: The Seurat Object in R","text":"Lets take look seurat object just created R, pbmc_processedTo accomodate complexity data arising single cell RNA seq experiment, seurat object keeps container multiple data tables linked.functions seurat can access parts data object analysis visualisation, cover later .essentially data containers R class, can accessed variable R environment.Classes pre-defined can contain multiple data tables metadata. Seurat, three types.Seurat - main data class, contains data.Assay - found within Seurat object. Depending experiment cell data RNA, ATAC etc measuredDimReduc - PCA UMAPSlots parts within class contain specific data. can lists, data tables vectors can accessed conventional R methods.Many functions Seurat operate data class slots within seamlessly. maybe occasion access separately hack , however advanced analysis method.Examples accessing Seurat objectThe assays slot pbmc_processed can accessed pbmc_processed@assays.RNA assay can accessed pbmc_processed@assays$RNA.often want access assays, Seurat nicely gives us shortcut pbmc_processed$RNA. may sometimes see alternative notation pbmc_processed[[\"RNA\"]].general, slots always object accessed @ things may different different data sets accessed $.goUse str look structure Seurat object pbmc_processed.meta.data slot within Seurat object currently? type data contained ?count data within Seurat object?","code":""},{"path":"load.html","id":"load","chapter":"4 Load data","heading":"4 Load data","text":"workshop follows introductory Guided Clustering Tutorial tutorial Seurat.bulk workshop may found original format .","code":""},{"path":"load.html","id":"setup-the-seurat-object","chapter":"4 Load data","heading":"4.1 Setup the Seurat Object","text":"tutorial, analyzing dataset Peripheral Blood Mononuclear Cells (PBMC) freely available 10X Genomics. 2,700 single cells sequenced Illumina NextSeq 500. raw data can found .start reading data. Read10X() function reads output cellranger pipeline 10X, returning unique molecular identified (UMI) count matrix. values matrix represent number molecules feature (.e. gene; row) detected cell (column).","code":""},{"path":"load.html","id":"note-what-does-the-data-look-like","chapter":"4 Load data","heading":"Note: What does the data look like?","text":"input files look like? varies, output CellRanger pipleine, described ","code":"├── analysis\n│   ├── clustering\n│   ├── diffexp\n│   ├── pca\n│   ├── tsne\n│   └── umap\n├── cloupe.cloupe\n├── filtered_feature_bc_matrix\n│   ├── barcodes.tsv.gz\n│   ├── features.tsv.gz\n│   └── matrix.mtx.gz\n├── filtered_feature_bc_matrix.h5\n├── metrics_summary.csv\n├── molecule_info.h5\n├── possorted_genome_bam.bam\n├── possorted_genome_bam.bam.bai\n├── raw_feature_bc_matrix\n│   ├── barcodes.tsv.gz\n│   ├── features.tsv.gz\n│   └── matrix.mtx.gz\n├── raw_feature_bc_matrix.h5\n└── web_summary.html"},{"path":"load.html","id":"section","chapter":"4 Load data","heading":"","text":"next use count matrix create Seurat object. object serves container contains data (like count matrix) analysis (like PCA, clustering results) single-cell dataset. technical discussion Seurat object structure, check GitHub Wiki. example, count matrix stored pbmc@assays$RNA@counts.. values matrix represent 0s (molecules detected). Since values scRNA-seq matrix 0, Seurat uses sparse-matrix representation whenever possible. results significant memory speed savings Drop-seq/inDrop/10x data.","code":"\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(Seurat)\nlibrary(patchwork)\n# Load the PBMC dataset\npbmc.data <- Read10X(data.dir = \"data/pbmc3k/filtered_gene_bc_matrices/hg19/\")\n# Initialize the Seurat object with the raw (non-normalized data).\npbmc <- CreateSeuratObject(counts = pbmc.data, project = \"pbmc3k\", min.cells = 3, min.features = 200)\npbmc\n#> An object of class Seurat \n#> 13714 features across 2700 samples within 1 assay \n#> Active assay: RNA (13714 features, 0 variable features)\n# Lets examine a few genes in the first thirty cells\npbmc.data[c(\"CD3D\",\"TCL1A\",\"MS4A1\"), 1:30]\n#> 3 x 30 sparse Matrix of class \"dgCMatrix\"\n#>    [[ suppressing 30 column names 'AAACATACAACCAC-1', 'AAACATTGAGCTAC-1', 'AAACATTGATCAGC-1' ... ]]\n#>                                                            \n#> CD3D  4 . 10 . . 1 2 3 1 . . 2 7 1 . . 1 3 . 2  3 . . . . .\n#> TCL1A . .  . . . . . . 1 . . . . . . . . . . .  . 1 . . . .\n#> MS4A1 . 6  . . . . . . 1 1 1 . . . . . . . . . 36 1 2 . . 2\n#>              \n#> CD3D  3 4 1 5\n#> TCL1A . . . .\n#> MS4A1 . . . .\ndense.size <- object.size(as.matrix(pbmc.data))\ndense.size\n#> 709591472 bytes\nsparse.size <- object.size(pbmc.data)\nsparse.size\n#> 29905192 bytes\ndense.size / sparse.size\n#> 23.7 bytes"},{"path":"qc.html","id":"qc","chapter":"5 QC Filtering","heading":"5 QC Filtering","text":"steps encompass standard pre-processing workflow scRNA-seq data Seurat. represent selection filtration cells based QC metrics, data normalization scaling, detection highly variable features.","code":""},{"path":"qc.html","id":"qc-and-selecting-cells-for-further-analysis","chapter":"5 QC Filtering","heading":"5.1 QC and selecting cells for further analysis","text":"Seurat allows easily explore QC metrics filter cells based user-defined criteria. QC metrics commonly used community includeThe number unique genes detected cell.\nLow-quality cells empty droplets often genes\nCell doublets multiplets may exhibit aberrantly high gene count\nLow-quality cells empty droplets often genesCell doublets multiplets may exhibit aberrantly high gene countSimilarly, total number molecules detected within cell (correlates strongly unique genes)percentage reads map mitochondrial genome\nLow-quality / dying cells often exhibit extensive mitochondrial contamination\ncalculate mitochondrial QC metrics PercentageFeatureSet() function, calculates percentage counts originating set features\nuse set genes starting MT- set mitochondrial genes\nLow-quality / dying cells often exhibit extensive mitochondrial contaminationWe calculate mitochondrial QC metrics PercentageFeatureSet() function, calculates percentage counts originating set featuresWe use set genes starting MT- set mitochondrial genes","code":"\n# The $ operator can add columns to object metadata. \n# This is a great place to stash QC stats\npbmc$percent.mt <- PercentageFeatureSet(pbmc, pattern = \"^MT-\")"},{"path":"qc.html","id":"challenge-the-meta.data-slot-in-the-seurat-object","chapter":"5 QC Filtering","heading":"Challenge: The meta.data slot in the Seurat object","text":"QC metrics stored Seurat?number unique genes total molecules automatically calculated CreateSeuratObject()\ncan find stored object meta data\ncan find stored object meta dataWhat notice changed within meta.data table now calculated mitochondrial gene proportion?notice changed within meta.data table now calculated mitochondrial gene proportion?Imagine first \nseveral samples experiment. Add samplename column meta.data table.Imagine first \nseveral samples experiment. Add samplename column meta.data table.","code":""},{"path":"qc.html","id":"section-1","chapter":"5 QC Filtering","heading":"","text":"example , visualize QC metrics, use filter cells.filter cells unique feature counts 2,500 less 200We filter cells >5% mitochondrial countsLets look number features (genes) percent mitochondrial genes plot.Okay happy thresholds mitochondrial percentage cells, lets apply subset data. remove cells think poor quality.Lets replot feature scatters see look like.","code":"\n#Visualize QC metrics as a violin plot\nVlnPlot(pbmc, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\n# FeatureScatter is typically used to visualize feature-feature relationships, \n# but can be used for anything calculated by the object, \n# i.e. columns in object metadata, PC scores etc.\nplot1 <- FeatureScatter(pbmc, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\") \nplot2 <- FeatureScatter(pbmc, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\") \nplot1 + plot2\nplot3 <- FeatureScatter(pbmc, feature1 = \"nFeature_RNA\", feature2 = \"percent.mt\") \nplot3\npbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)\nplot5 <- FeatureScatter(pbmc, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\") \nplot6 <- FeatureScatter(pbmc, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\") \nplot5 + plot6"},{"path":"qc.html","id":"challenge-filter-the-cells","chapter":"5 QC Filtering","heading":"Challenge: Filter the cells","text":"Apply filtering thresolds defined .many cells survive filtering?Try different combination filtering thresholds. many cells pass ? Remember assign results different object!","code":"\npbmc_unfiltered <- pbmc\npbmc_qctest <- subset(pbmc_unfiltered, subset = ...)"},{"path":"norm.html","id":"norm","chapter":"6 Normalisation","heading":"6 Normalisation","text":"removing unwanted cells dataset, next step normalize data. default, employ global-scaling normalization method “LogNormalize” normalizes feature expression measurements cell total expression, multiplies scale factor (10,000 default), log-transforms result. Normalized values stored pbmc$RNA@data.clarity, previous line code (future commands), provide default values certain parameters function call. However, isn’t required behavior can achieved :","code":"\npbmc <- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 1e4)\npbmc <- NormalizeData(pbmc)"},{"path":"reducedims.html","id":"reducedims","chapter":"7 PCAs and UMAPs","heading":"7 PCAs and UMAPs","text":"","code":""},{"path":"reducedims.html","id":"identification-of-highly-variable-features-feature-selection","chapter":"7 PCAs and UMAPs","heading":"7.1 Identification of highly variable features (feature selection)","text":"next calculate subset features exhibit high cell--cell variation dataset (.e, highly expressed cells, lowly expressed others). others found focusing genes downstream analysis helps highlight biological signal single-cell datasets.procedure Seurat described detail , improves previous versions directly modeling mean-variance relationship inherent single-cell data, implemented FindVariableFeatures() function. default, return 2,000 features per dataset. used downstream analysis, like PCA.","code":"\npbmc <- FindVariableFeatures(pbmc, selection.method = 'vst', nfeatures = 2000)\n# Identify the 10 most highly variable genes\ntop10 <- head(VariableFeatures(pbmc), 10)\n# plot variable features with and without labels\nplot1 <- VariableFeaturePlot(pbmc)\nplot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)\n#> When using repel, set xnudge and ynudge to 0 for optimal results\nplot1 + plot2\n#> Warning: Transformation introduced infinite values in\n#> continuous x-axis\n#> Warning: Removed 1 rows containing missing values\n#> (geom_point).\n#> Warning: Transformation introduced infinite values in\n#> continuous x-axis\n#> Warning: Removed 1 rows containing missing values\n#> (geom_point)."},{"path":"reducedims.html","id":"scaling-the-data","chapter":"7 PCAs and UMAPs","heading":"7.2 Scaling the data","text":"Next, apply linear transformation (‘scaling’) standard pre-processing step prior dimensional reduction techniques like PCA. ScaleData() function:Shifts expression gene, mean expression across cells 0Scales expression gene, variance across cells 1\nstep gives equal weight downstream analyses, highly-expressed genes dominate\nstep gives equal weight downstream analyses, highly-expressed genes dominateThe results stored pbmc$RNA@scale.dataScaling essential step Seurat workflow, genes used input PCA. Therefore, default ScaleData() perform scaling previously identified variable features (2,000 default). , omit features argument previous function call, .e.Seurat v2 also use ScaleData() function remove unwanted sources variation single-cell dataset. example, ‘regress ’ heterogeneity associated (example) cell cycle stage, mitochondrial contamination. features still supported ScaleData() Seurat v3, .e.: ","code":"\nall.genes <- rownames(pbmc)\npbmc <- ScaleData(pbmc, features = all.genes)\n#> Centering and scaling data matrix\n# pbmc <- ScaleData(pbmc)\n# pbmc <- ScaleData(pbmc, vars.to.regress = 'percent.mt')"},{"path":"reducedims.html","id":"perform-linear-dimensional-reduction","chapter":"7 PCAs and UMAPs","heading":"7.3 Perform linear dimensional reduction","text":"Next perform PCA scaled data. default, previously determined variable features used input, can defined using features argument wish choose different subset.Seurat provides several useful ways visualizing cells features define PCA, including VizDimReduction(), DimPlot(), DimHeatmap()particular DimHeatmap() allows easy exploration primary sources heterogeneity dataset, can useful trying decide PCs include downstream analyses. cells features ordered according PCA scores. Setting cells number plots ‘extreme’ cells ends spectrum, dramatically speeds plotting large datasets. Though clearly supervised analysis, find valuable tool exploring correlated feature sets.","code":"\npbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))\n#> PC_ 1 \n#> Positive:  CST3, TYROBP, LST1, AIF1, FTL, FTH1, LYZ, FCN1, S100A9, TYMP \n#>     FCER1G, CFD, LGALS1, S100A8, CTSS, LGALS2, SERPINA1, IFITM3, SPI1, CFP \n#>     PSAP, IFI30, SAT1, COTL1, S100A11, NPC2, GRN, LGALS3, GSTP1, PYCARD \n#> Negative:  MALAT1, LTB, IL32, IL7R, CD2, B2M, ACAP1, CD27, STK17A, CTSW \n#>     CD247, GIMAP5, AQP3, CCL5, SELL, TRAF3IP3, GZMA, MAL, CST7, ITM2A \n#>     MYC, GIMAP7, HOPX, BEX2, LDLRAP1, GZMK, ETS1, ZAP70, TNFAIP8, RIC3 \n#> PC_ 2 \n#> Positive:  CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1, HLA-DRA, LINC00926, CD79B, HLA-DRB1, CD74 \n#>     HLA-DMA, HLA-DPB1, HLA-DQA2, CD37, HLA-DRB5, HLA-DMB, HLA-DPA1, FCRLA, HVCN1, LTB \n#>     BLNK, P2RX5, IGLL5, IRF8, SWAP70, ARHGAP24, FCGR2B, SMIM14, PPP1R14A, C16orf74 \n#> Negative:  NKG7, PRF1, CST7, GZMB, GZMA, FGFBP2, CTSW, GNLY, B2M, SPON2 \n#>     CCL4, GZMH, FCGR3A, CCL5, CD247, XCL2, CLIC3, AKR1C3, SRGN, HOPX \n#>     TTC38, APMAP, CTSC, S100A4, IGFBP7, ANXA1, ID2, IL32, XCL1, RHOC \n#> PC_ 3 \n#> Positive:  HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1, HLA-DPA1, CD74, MS4A1, HLA-DRB1, HLA-DRA \n#>     HLA-DRB5, HLA-DQA2, TCL1A, LINC00926, HLA-DMB, HLA-DMA, CD37, HVCN1, FCRLA, IRF8 \n#>     PLAC8, BLNK, MALAT1, SMIM14, PLD4, LAT2, IGLL5, P2RX5, SWAP70, FCGR2B \n#> Negative:  PPBP, PF4, SDPR, SPARC, GNG11, NRGN, GP9, RGS18, TUBB1, CLU \n#>     HIST1H2AC, AP001189.4, ITGA2B, CD9, TMEM40, PTCRA, CA2, ACRBP, MMD, TREML1 \n#>     NGFRAP1, F13A1, SEPT5, RUFY1, TSC22D1, MPP1, CMTM5, RP11-367G6.3, MYL9, GP1BA \n#> PC_ 4 \n#> Positive:  HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1, CD74, HLA-DPB1, HIST1H2AC, PF4, TCL1A \n#>     SDPR, HLA-DPA1, HLA-DRB1, HLA-DQA2, HLA-DRA, PPBP, LINC00926, GNG11, HLA-DRB5, SPARC \n#>     GP9, AP001189.4, CA2, PTCRA, CD9, NRGN, RGS18, GZMB, CLU, TUBB1 \n#> Negative:  VIM, IL7R, S100A6, IL32, S100A8, S100A4, GIMAP7, S100A10, S100A9, MAL \n#>     AQP3, CD2, CD14, FYB, LGALS2, GIMAP4, ANXA1, CD27, FCN1, RBP7 \n#>     LYZ, S100A11, GIMAP5, MS4A6A, S100A12, FOLR3, TRABD2A, AIF1, IL8, IFI6 \n#> PC_ 5 \n#> Positive:  GZMB, NKG7, S100A8, FGFBP2, GNLY, CCL4, CST7, PRF1, GZMA, SPON2 \n#>     GZMH, S100A9, LGALS2, CCL3, CTSW, XCL2, CD14, CLIC3, S100A12, CCL5 \n#>     RBP7, MS4A6A, GSTP1, FOLR3, IGFBP7, TYROBP, TTC38, AKR1C3, XCL1, HOPX \n#> Negative:  LTB, IL7R, CKB, VIM, MS4A7, AQP3, CYTIP, RP11-290F20.3, SIGLEC10, HMOX1 \n#>     PTGES3, LILRB2, MAL, CD27, HN1, CD2, GDI2, ANXA5, CORO1B, TUBA1B \n#>     FAM110A, ATP1A1, TRADD, PPA1, CCDC109B, ABRACL, CTD-2006K23.1, WARS, VMO1, FYB\n# Examine and visualize PCA results a few different ways\nprint(pbmc$pca, dims = 1:5, nfeatures = 5)\n#> PC_ 1 \n#> Positive:  CST3, TYROBP, LST1, AIF1, FTL \n#> Negative:  MALAT1, LTB, IL32, IL7R, CD2 \n#> PC_ 2 \n#> Positive:  CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1 \n#> Negative:  NKG7, PRF1, CST7, GZMB, GZMA \n#> PC_ 3 \n#> Positive:  HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1 \n#> Negative:  PPBP, PF4, SDPR, SPARC, GNG11 \n#> PC_ 4 \n#> Positive:  HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1 \n#> Negative:  VIM, IL7R, S100A6, IL32, S100A8 \n#> PC_ 5 \n#> Positive:  GZMB, NKG7, S100A8, FGFBP2, GNLY \n#> Negative:  LTB, IL7R, CKB, VIM, MS4A7\nVizDimLoadings(pbmc, dims = 1:2, reduction = 'pca')\nDimPlot(pbmc, reduction = 'pca')\nDimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)\nDimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)"},{"path":"reducedims.html","id":"challenge-pc-genes","chapter":"7 PCAs and UMAPs","heading":"Challenge: PC genes","text":"Plot highly weighted principal component genes pbmc object FeaturePlot() function. look?","code":""},{"path":"reducedims.html","id":"determine-the-dimensionality-of-the-dataset","chapter":"7 PCAs and UMAPs","heading":"7.4 Determine the ‘dimensionality’ of the dataset","text":"overcome extensive technical noise single feature scRNA-seq data, Seurat clusters cells based PCA scores, PC essentially representing ‘metafeature’ combines information across correlated feature set. top principal components therefore represent robust compression dataset. However, many components choose include? 10? 20? 100?Note: Seurat developers suggest using JackStraw resampling test determine . See Macosko et al, original pbmc3 vignette. ’re going use Elbow Plot instead , much quicker.alternative heuristic method generates ‘Elbow plot’: ranking principle components based percentage variance explained one (ElbowPlot() function). example, can observe ‘elbow’ around PC9-10, suggesting majority true signal captured first 10 PCs.Identifying true dimensionality dataset – can challenging/uncertain user. therefore suggest three approaches consider. first supervised, exploring PCs determine relevant sources heterogeneity, used conjunction GSEA example. second implements statistical test based random null model, time-consuming large datasets, may return clear PC cutoff. third heuristic commonly used, can calculated instantly. example, three approaches yielded similar results, might justified choosing anything PC 7-12 cutoff.chose 10 , encourage users consider following:Dendritic cell NK aficionados may recognize genes strongly associated PCs 12 13 define rare immune subsets (.e. MZB1 marker plasmacytoid DCs). However, groups rare, difficult distinguish background noise dataset size without prior knowledge.encourage users repeat downstream analyses different number PCs (10, 15, even 50!). observe, results often differ dramatically.advise users err higher side choosing parameter. example, performing downstream analyses 5 PCs significantly adversely affect results.","code":"\nElbowPlot(pbmc)"},{"path":"reducedims.html","id":"run-non-linear-dimensional-reduction-umaptsne","chapter":"7 PCAs and UMAPs","heading":"7.5 Run non-linear dimensional reduction (UMAP/tSNE)","text":"Seurat offers several non-linear dimensional reduction techniques, tSNE UMAP, visualize explore datasets. goal algorithms learn underlying manifold data order place similar cells together low-dimensional space. Cells within graph-based clusters determined co-localize dimension reduction plots. input UMAP tSNE, suggest using PCs input clustering analysis.can save object point can easily loaded back without rerun computationally intensive steps performed , easily shared collaborators.","code":"\n# If you haven't installed UMAP, you can do so via reticulate::py_install(packages = \"umap-learn\")\npbmc <- RunUMAP(pbmc, dims = 1:10)\n#> Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric\n#> To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'\n#> This message will be shown once per session\n#> 19:24:21 UMAP embedding parameters a = 0.9922 b = 1.112\n#> 19:24:21 Read 2638 rows and found 10 numeric columns\n#> 19:24:21 Using Annoy for neighbor search, n_neighbors = 30\n#> 19:24:21 Building Annoy index with metric = cosine, n_trees = 50\n#> 0%   10   20   30   40   50   60   70   80   90   100%\n#> [----|----|----|----|----|----|----|----|----|----|\n#> **************************************************|\n#> 19:24:21 Writing NN index file to temp file /var/folders/tp/b078yqdd4ydff9fx87lfttpj_sc0x3/T//RtmpYiCNZc/file4fb332c4baf\n#> 19:24:21 Searching Annoy index using 1 thread, search_k = 3000\n#> 19:24:22 Annoy recall = 100%\n#> 19:24:22 Commencing smooth kNN distance calibration using 1 thread\n#> 19:24:22 Initializing from normalized Laplacian + noise\n#> 19:24:22 Commencing optimization for 500 epochs, with 105124 positive edges\n#> 19:24:26 Optimization finished\n# note that you can set `label = TRUE` or use the LabelClusters function to help label individual clusters\nDimPlot(pbmc, reduction = 'umap')\nsaveRDS(pbmc, file = \"pbmc_tutorial_saved.rds\") "},{"path":"clustering.html","id":"clustering","chapter":"8 Clustering","heading":"8 Clustering","text":"Seurat v3 applies graph-based clustering approach, building upon initial strategies (Macosko et al). Importantly, distance metric drives clustering analysis (based previously identified PCs) remains . However, approach partitioning cellular distance matrix clusters dramatically improved. approach heavily inspired recent manuscripts applied graph-based clustering approaches scRNA-seq data [SNN-Cliq, Xu Su, Bioinformatics, 2015] CyTOF data [PhenoGraph, Levine et al., Cell, 2015]. Briefly, methods embed cells graph structure - example K-nearest neighbor (KNN) graph, edges drawn cells similar feature expression patterns, attempt partition graph highly interconnected ‘quasi-cliques’ ‘communities’.PhenoGraph, first construct KNN graph based euclidean distance PCA space, refine edge weights two cells based shared overlap local neighborhoods (Jaccard similarity). step performed using FindNeighbors() function, takes input previously defined dimensionality dataset (first 10 PCs).cluster cells, next apply modularity optimization techniques Louvain algorithm (default) SLM [SLM, Blondel et al., Journal Statistical Mechanics], iteratively group cells together, goal optimizing standard modularity function. FindClusters() function implements procedure, contains resolution parameter sets ‘granularity’ downstream clustering, increased values leading greater number clusters. find setting parameter 0.4-1.2 typically returns good results single-cell datasets around 3K cells. Optimal resolution often increases larger datasets. clusters can found using Idents() function.Check clusters.","code":"\npbmc <- FindNeighbors(pbmc, dims = 1:10)\n#> Computing nearest neighbor graph\n#> Computing SNN\npbmc <- FindClusters(pbmc, resolution = 0.5)\n#> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n#> \n#> Number of nodes: 2638\n#> Number of edges: 95965\n#> \n#> Running Louvain algorithm...\n#> Maximum modularity in 10 random starts: 0.8723\n#> Number of communities: 9\n#> Elapsed time: 0 seconds\n# Look at cluster IDs of the first 5 cells\nhead(Idents(pbmc), 5)\n#> AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 \n#>                2                3                2 \n#> AAACCGTGCTTCCG-1 AAACCGTGTATGCG-1 \n#>                1                6 \n#> Levels: 0 1 2 3 4 5 6 7 8\nDimPlot(pbmc)\n# Equivalent to\n# DimPlot(pbmc,reduction=\"umap\", group.by=\"seurat_clusters\")\n# DimPlot(pbmc,reduction=\"umap\", group.by=\"RNA_snn_res.0.5\")"},{"path":"clustering.html","id":"challenge-try-different-cluster-settings","chapter":"8 Clustering","heading":"Challenge: Try different cluster settings","text":"Run FindNeighbours FindClusters , different number dimensions different resolution. Examine resulting clusters using DimPlot.maintain flow tutorial, please put output exploration different variable, pbmc2!","code":""},{"path":"cluster-markers.html","id":"cluster-markers","chapter":"9 Cluster Markers","heading":"9 Cluster Markers","text":"","code":""},{"path":"cluster-markers.html","id":"finding-differentially-expressed-features-cluster-biomarkers","chapter":"9 Cluster Markers","heading":"9.1 Finding differentially expressed features (cluster biomarkers)","text":"Seurat can help find markers define clusters via differential expression. default, identifies positive negative markers single cluster (specified ident.1), compared cells. FindAllMarkers() automates process clusters, can also test groups clusters vs. , cells.min.pct argument requires feature detected minimum percentage either two groups cells, thresh.test argument requires feature differentially expressed (average) amount two groups. can set 0, dramatic increase time - since test large number features unlikely highly discriminatory. another option speed computations, max.cells.per.ident can set. downsample identity class cells whatever set . generally going loss power, speed increases can significant highly differentially expressed features likely still rise top.Seurat several tests differential expression can set test.use parameter (see DE vignette details). example, ROC test returns ‘classification power’ abs(AUC-0.5)*2 individual marker, ranging 0 = random 1 = perfect.include several tools visualizing marker expression. VlnPlot() (shows expression probability distributions across clusters), FeaturePlot() (visualizes feature expression tSNE PCA plot) commonly used visualizations. also suggest exploring RidgePlot(), CellScatter(), DotPlot() additional methods view dataset.ridgeplots, cell scatter plots dotplots. Replace FeaturePlot functions.\nCellScatter plots, need cell id cells want look . can get cell metadata (pbmc@meta.data).DotPlotsWhich plots prefer? Discuss.DoHeatmap() generates expression heatmap given cells features. case, plotting top 20 markers (markers less 20) cluster.","code":"\n# find all markers of cluster 2\ncluster2.markers <- FindMarkers(pbmc, ident.1 = 2, min.pct = 0.25)\nhead(cluster2.markers, n = 5)\n#>             p_val avg_log2FC pct.1 pct.2    p_val_adj\n#> IL32 2.593535e-91  1.2154360 0.949 0.466 3.556774e-87\n#> LTB  7.994465e-87  1.2828597 0.981 0.644 1.096361e-82\n#> CD3D 3.922451e-70  0.9359210 0.922 0.433 5.379250e-66\n#> IL7R 1.130870e-66  1.1776027 0.748 0.327 1.550876e-62\n#> LDHB 4.082189e-65  0.8837324 0.953 0.614 5.598314e-61\n# find all markers distinguishing cluster 5 from clusters 0 and 3\ncluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)\nhead(cluster5.markers, n = 5)\n#>                       p_val avg_log2FC pct.1 pct.2\n#> FCGR3A        2.150929e-209   4.267579 0.975 0.039\n#> IFITM3        6.103366e-199   3.877105 0.975 0.048\n#> CFD           8.891428e-198   3.411039 0.938 0.037\n#> CD68          2.374425e-194   3.014535 0.926 0.035\n#> RP11-290F20.3 9.308287e-191   2.722684 0.840 0.016\n#>                   p_val_adj\n#> FCGR3A        2.949784e-205\n#> IFITM3        8.370156e-195\n#> CFD           1.219370e-193\n#> CD68          3.256286e-190\n#> RP11-290F20.3 1.276538e-186\n# find markers for every cluster compared to all remaining cells, report only the positive ones\npbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\n#> Calculating cluster 0\n#> Calculating cluster 1\n#> Calculating cluster 2\n#> Calculating cluster 3\n#> Calculating cluster 4\n#> Calculating cluster 5\n#> Calculating cluster 6\n#> Calculating cluster 7\n#> Calculating cluster 8\npbmc.markers %>% group_by(cluster) %>% slice_max(n = 2, order_by = avg_log2FC)\n#> # A tibble: 18 × 7\n#> # Groups:   cluster [9]\n#>        p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene  \n#>        <dbl>      <dbl> <dbl> <dbl>     <dbl> <fct>   <chr> \n#>  1 1.17e- 83       1.33 0.435 0.108 1.60e- 79 0       CCR7  \n#>  2 1.74e-109       1.07 0.897 0.593 2.39e-105 0       LDHB  \n#>  3 0               5.57 0.996 0.215 0         1       S100A9\n#>  4 0               5.48 0.975 0.121 0         1       S100A8\n#>  5 7.99e- 87       1.28 0.981 0.644 1.10e- 82 2       LTB   \n#>  6 2.61e- 59       1.24 0.424 0.111 3.58e- 55 2       AQP3  \n#>  7 0               4.31 0.936 0.041 0         3       CD79A \n#>  8 9.48e-271       3.59 0.622 0.022 1.30e-266 3       TCL1A \n#>  9 4.93e-169       3.01 0.595 0.056 6.76e-165 4       GZMK  \n#> 10 1.17e-178       2.97 0.957 0.241 1.60e-174 4       CCL5  \n#> 11 3.51e-184       3.31 0.975 0.134 4.82e-180 5       FCGR3A\n#> 12 2.03e-125       3.09 1     0.315 2.78e-121 5       LST1  \n#> 13 6.82e-175       4.92 0.958 0.135 9.36e-171 6       GNLY  \n#> 14 1.05e-265       4.89 0.986 0.071 1.44e-261 6       GZMB  \n#> 15 1.48e-220       3.87 0.812 0.011 2.03e-216 7       FCER1A\n#> 16 1.67e- 21       2.87 1     0.513 2.28e- 17 7       HLA-D…\n#> 17 3.68e-110       8.58 1     0.024 5.05e-106 8       PPBP  \n#> 18 7.73e-200       7.24 1     0.01  1.06e-195 8       PF4\ncluster0.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = \"roc\", only.pos = TRUE)\nVlnPlot(pbmc, features = c(\"MS4A1\", \"CD79A\"))\n# you can plot raw counts as well\nVlnPlot(pbmc, features = c(\"NKG7\", \"PF4\"), slot = 'counts', log = TRUE)\nFeaturePlot(pbmc, features = c(\"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\", \"FCER1A\", \"FCGR3A\", \"LYZ\", \"PPBP\", \"CD8A\"))\nRidgePlot(pbmc, features = c(\"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\", \"FCER1A\", \"FCGR3A\", \"LYZ\", \"PPBP\", \"CD8A\"))\n#> Picking joint bandwidth of 0.0236\n#> Picking joint bandwidth of 0.0971\n#> Picking joint bandwidth of 0.125\n#> Picking joint bandwidth of 0.0337\n#> Picking joint bandwidth of 0.0659\n#> Picking joint bandwidth of 0.0872\n#> Picking joint bandwidth of 0.319\n#> Picking joint bandwidth of 0.033\n#> Picking joint bandwidth of 0.0368\nhead( pbmc@meta.data )\n#>                  orig.ident nCount_RNA nFeature_RNA\n#> AAACATACAACCAC-1     pbmc3k       2419          779\n#> AAACATTGAGCTAC-1     pbmc3k       4903         1352\n#> AAACATTGATCAGC-1     pbmc3k       3147         1129\n#> AAACCGTGCTTCCG-1     pbmc3k       2639          960\n#> AAACCGTGTATGCG-1     pbmc3k        980          521\n#> AAACGCACTGGTAC-1     pbmc3k       2163          781\n#>                  percent.mt RNA_snn_res.0.5 seurat_clusters\n#> AAACATACAACCAC-1  3.0177759               2               2\n#> AAACATTGAGCTAC-1  3.7935958               3               3\n#> AAACATTGATCAGC-1  0.8897363               2               2\n#> AAACCGTGCTTCCG-1  1.7430845               1               1\n#> AAACCGTGTATGCG-1  1.2244898               6               6\n#> AAACGCACTGGTAC-1  1.6643551               2               2\nCellScatter(pbmc, cell1 = \"AAACATACAACCAC-1\", cell2 = \"AAACATTGAGCTAC-1\")\nDotPlot(pbmc, features = c(\"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\", \"FCER1A\", \"FCGR3A\", \"LYZ\", \"PPBP\", \"CD8A\"))\ntop10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)\nDoHeatmap(pbmc, features = top10$gene) + NoLegend()"},{"path":"cluster-markers.html","id":"assigning-cell-type-identity-to-clusters","chapter":"9 Cluster Markers","heading":"9.2 Assigning cell type identity to clusters","text":"Fortunately case dataset, can use canonical markers easily match unbiased clustering known cell types:","code":"\nnew.cluster.ids <- c(\"Naive CD4 T\", \"CD14+ Mono\", \"Memory CD4 T\", \"B\", \"CD8 T\", \"FCGR3A+ Mono\", \"NK\", \"DC\", \"Platelet\")\nnames(new.cluster.ids) <- levels(pbmc)\npbmc <- RenameIdents(pbmc, new.cluster.ids)\nDimPlot(pbmc, reduction = 'umap', label = TRUE, pt.size = 0.5) + NoLegend()\nsaveRDS(pbmc, file = \"pbmc3k_final.rds\")"},{"path":"singler.html","id":"singler","chapter":"10 SingleR","heading":"10 SingleR","text":"workshop focused Seurat package. However, another whole ecosystem R packages single cell analysis within Bioconductor. won’t go detail packages workshop, good material describing object type online : OSCA.now, ’ll just convert Seurat object object called SingleCellExperiment. popular packages Bioconductor work type Slingshot, Scran, Scater.now use package called SingleR label cell. SingleR uses reference data set cell types expression data infer best label cell. convenient collection cell type reference celldex package currently contains follow sets:example, ’ll use HumanPrimaryCellAtlasData set, contains high-level, fine-grained label types. Lets download reference datasetAn example types “fine” labels.Now ’ll label cells using SingleCellExperiment object, reference set.Keep types 10 cells label, put labels back Seurat object plot umap.nice see SingleR use clusters computed earlier, labels seem match clusters reasonably well.","code":"\n#install.packages(\"BiocManager\")\n#BiocManager::install(c(\"SingleCellExperiment\",\"SingleR\",\"celldex\"),ask=F)\nlibrary(SingleCellExperiment)\nlibrary(SingleR)\nlibrary(celldex)\nsce <- as.SingleCellExperiment(pbmc)\nls('package:celldex')\n#> [1] \"BlueprintEncodeData\"             \n#> [2] \"DatabaseImmuneCellExpressionData\"\n#> [3] \"HumanPrimaryCellAtlasData\"       \n#> [4] \"ImmGenData\"                      \n#> [5] \"MonacoImmuneData\"                \n#> [6] \"MouseRNAseqData\"                 \n#> [7] \"NovershternHematopoieticData\"\nref.set <- celldex::HumanPrimaryCellAtlasData()\n#> snapshotDate(): 2021-10-19\n#> see ?celldex and browseVignettes('celldex') for documentation\n#> loading from cache\n#> see ?celldex and browseVignettes('celldex') for documentation\n#> loading from cache\nhead(unique(ref.set$label.main))\n#> [1] \"DC\"                  \"Smooth_muscle_cells\"\n#> [3] \"Epithelial_cells\"    \"B_cell\"             \n#> [5] \"Neutrophils\"         \"T_cells\"\nhead(unique(ref.set$label.fine))\n#> [1] \"DC:monocyte-derived:immature\"       \n#> [2] \"DC:monocyte-derived:Galectin-1\"     \n#> [3] \"DC:monocyte-derived:LPS\"            \n#> [4] \"DC:monocyte-derived\"                \n#> [5] \"Smooth_muscle_cells:bronchial:vit_D\"\n#> [6] \"Smooth_muscle_cells:bronchial\"\npred.cnts <- SingleR::SingleR(test = sce, ref = ref.set, labels = ref.set$label.main)\nlbls.keep <- table(pred.cnts$first.labels)>10\npbmc$SingleR.labels <- ifelse(lbls.keep[pred.cnts$first.labels], pred.cnts$first.labels, 'Other')\nDimPlot(pbmc, reduction='umap', group.by='SingleR.labels')"},{"path":"de2.html","id":"de2","chapter":"11 Differential Expression","heading":"11 Differential Expression","text":"many different methods calculating differential expression groups scRNAseq data. number review papers worth consulting topic.Seurat differential expression Vignette walks variety implemented Seurat.also good\nincludes good discussion useing pseudobulk approaches, worth checking differential expression analyses.example quickly looks 3 different methods pbmc dataset. arbirailiy carving pbmc dataset one individual 6 differenct samples, differentially expressed genes.","code":""},{"path":"de2.html","id":"setup","chapter":"11 Differential Expression","heading":"11.1 Setup","text":"First, arbitraily divide pbmc cells 6 different replicates; 3 knockouts 3 wild types. reality, \none individual, shouldn’t really difference.many ?","code":"\n# if needed, reload from processsed object\n#pbmc <- readRDS(\"data/pbmc_tutorial.rds\")\n\nreplicates_lookup <- c(\"wt1\"=\"WT\",\"wt2\"=\"WT\",\"wt3\"=\"WT\",\"ko4\"=\"KO\",\"ko5\"=\"KO\",\"ko6\"=\"KO\")\naltered_genes <- c()\n\n# %% is modulo operator, just a conventient way to make 1-6 repeatedly, to put cells into 'samples'\npbmc$Sample    <- factor(names(replicates_lookup)[1:ncol(pbmc) %% length(replicates_lookup) + 1], \n                         levels=names(replicates_lookup))\npbmc$Condition <- factor(replicates_lookup[pbmc$Sample], levels=c(\"KO\",\"WT\"))\n\n\nDimPlot(pbmc, group.by = \"Sample\", split.by=\"Condition\") + ggtitle(\"Dividing pbmc into fake 'Samples'\")\ntable( pbmc$Sample, pbmc$Condition)\n#>      \n#>        KO  WT\n#>   wt1   0 439\n#>   wt2   0 440\n#>   wt3   0 440\n#>   ko4 440   0\n#>   ko5 440   0\n#>   ko6 439   0"},{"path":"de2.html","id":"prefiltering","chapter":"11 Differential Expression","heading":"11.2 Prefiltering","text":"differential expression, generally ignore genes low experssion.\nexpression certain level, almost impossible see differential expression.single cell datasets, many genes like . Filtering make dataset smaller runs quicker, less agressive correction multiple hypotheses.many genes now?clusters, reference; differential expression, focussing just cluster 0. easy way subset object.","code":"\ntotal_per_gene <- rowSums(GetAssayData(pbmc, 'counts'))\nhist(log10(total_per_gene))\npbmc <- pbmc[total_per_gene >= 50, ] \npbmc\n#> An object of class Seurat \n#> 7261 features across 2638 samples within 1 assay \n#> Active assay: RNA (7261 features, 1622 variable features)\n#>  2 dimensional reductions calculated: pca, umap\n# Set idents to pbmc$RNA_snn_res.0.5\nIdents(pbmc) <- pbmc$RNA_snn_res.0.5\npbmc.c0 <- pbmc[, pbmc$RNA_snn_res.0.5 %in% c(0) ]\n\nDimPlot(pbmc) + DimPlot(pbmc.c0)"},{"path":"de2.html","id":"default-wilcox-test","chapter":"11 Differential Expression","heading":"11.3 Default Wilcox test","text":"Look top differentially expressed genes.","code":"\n\n\n# Change Ident to Condition\nIdents(pbmc.c0) <- pbmc.c0$Condition\n\n# default, wilcox test\nde_result_wilcox <- FindMarkers(pbmc.c0, \n            ident.1 = 'KO',\n            ident.2 = 'WT',\n            logfc.threshold = 0, # Give me ALL results\n            min.pct = 0,\n            max.cells.per.ident = 400  # Downsample cells - purely for speed!\n            )\n\n# Add average expression for plotting\nde_result_wilcox$AveExpr<- rowMeans(pbmc.c0[[\"RNA\"]][rownames(de_result_wilcox),])\nhead(de_result_wilcox)\n#>               p_val avg_log2FC pct.1 pct.2 p_val_adj\n#> NPC2   0.0002284639 -0.3268974 0.187 0.301         1\n#> MIS18A 0.0007953916 -0.7171463 0.005 0.044         1\n#> MYCBP2 0.0008318464  0.5817314 0.108 0.041         1\n#> PSMB7  0.0010863851 -0.3233361 0.187 0.301         1\n#> HP1BP3 0.0011765203  0.4299005 0.154 0.076         1\n#> ARID1A 0.0012890580  0.3525470 0.081 0.026         1\n#>           AveExpr\n#> NPC2   0.42495501\n#> MIS18A 0.04701465\n#> MYCBP2 0.14248032\n#> PSMB7  0.42796496\n#> HP1BP3 0.21746645\n#> ARID1A 0.09764543\np1 <- ggplot(de_result_wilcox, aes(x=AveExpr, y=avg_log2FC, col=p_val_adj < 0.05)) +\n  geom_point(col='black') +\n  theme_bw() +\n  ggtitle(\"Wilcox Test\")\n\n\np2 <- ggplot(de_result_wilcox, aes(x=avg_log2FC, y=-log10(p_val), col=p_val_adj < 0.05)) +\n  geom_point(col='black') +\n  theme_bw() +\n  ggtitle(\"Wilcox Test (Volcano)\")\n\np1 + p2"},{"path":"de2.html","id":"seurat-negative-binomial","chapter":"11 Differential Expression","heading":"11.4 Seurat Negative binomial","text":"Look top differentially expressed genes.","code":"\n\n# Change Ident to Condition\nIdents(pbmc.c0) <- pbmc.c0$Condition\n\n# default, wilcox test\nde_result_negbinom <- FindMarkers(pbmc.c0, \n            test.use=\"negbinom\", # Choose a different test.\n            ident.1 = 'KO',\n            ident.2 = 'WT',\n            logfc.threshold = 0, # Give me ALL results\n            min.pct = 0,\n            max.cells.per.ident = 400  # Downsample cells - purely for speed!\n)\n\n# Add average expression for plotting\nde_result_negbinom$AveExpr<- rowMeans(pbmc.c0[[\"RNA\"]][rownames(de_result_negbinom),])\nhead(de_result_negbinom)\n#>               p_val avg_log2FC pct.1 pct.2 p_val_adj\n#> NDUFA2 0.0000190638 -0.3059620 0.176 0.205 0.1384222\n#> MIS18A 0.0001194018 -0.2182053 0.005 0.044 0.8669761\n#> OXLD1  0.0001414241  0.2655570 0.100 0.061 1.0000000\n#> MYCBP2 0.0002130811  0.1674071 0.108 0.041 1.0000000\n#> TPT1   0.0002264960 -0.2260388 0.992 1.000 1.0000000\n#> GSTO1  0.0002557791 -0.2014634 0.130 0.213 1.0000000\n#>           AveExpr\n#> NDUFA2 0.34169986\n#> MIS18A 0.04701465\n#> OXLD1  0.15888166\n#> MYCBP2 0.14248032\n#> TPT1   3.92632526\n#> GSTO1  0.31011655\np1 <- ggplot(de_result_negbinom, aes(x=AveExpr, y=avg_log2FC, col=p_val_adj < 0.05)) +\n  geom_point(col='black') +\n  theme_bw() +\n  ggtitle(\"Negative Bionomial Test\")\n\n\np2 <- ggplot(de_result_negbinom, aes(x=avg_log2FC, y=-log10(p_val), col=p_val_adj < 0.05)) +\n  geom_point(col='black') +\n  theme_bw() +\n  ggtitle(\"Negative Bionomial Test (Volcano)\")\n\np1 + p2"},{"path":"de2.html","id":"pseudobulk","chapter":"11 Differential Expression","heading":"11.5 Pseudobulk","text":"Pseudobulk analysis option biological replicates. essentially pooling individual cell counts treating expreiment like bulk RNAseq.First, need build pseudobulk matrix - AggregateExpression() function can , set ‘Idents’ seurat object grouping factor (, sample instead cluster).Now looks like bulk RNAseq experiment, treat like one.Look significantly differentially expressed genes:","code":"\n# Tools for bulk differential expression\nlibrary(limma)\n#> Warning: package 'limma' was built under R version 4.1.3\n#> \n#> Attaching package: 'limma'\n#> The following object is masked from 'package:BiocGenerics':\n#> \n#>     plotMA\nlibrary(edgeR)\n#> Warning: package 'edgeR' was built under R version 4.1.1\n#> \n#> Attaching package: 'edgeR'\n#> The following object is masked from 'package:SingleCellExperiment':\n#> \n#>     cpm\n\n\n# Change idents to *sample* for grouping.\nIdents(pbmc.c0) <- pbmc.c0$Sample\n\n\npseudobulk_matrix <- AggregateExpression( pbmc.c0,  slot = 'counts', assays='RNA' )[['RNA']]\npseudobulk_matrix[1:5,]\n#>          wt1 wt2 wt3 ko4 ko5 ko6\n#> NOC2L      9  11  20  10  14  10\n#> HES4       1   0   2   0   0   0\n#> ISG15     42  53  46  46  39  46\n#> TNFRSF18   3   1   3   3   2   1\n#> TNFRSF4   11   5   4   9   5   8\ndge <- DGEList(pseudobulk_matrix)\ndge <- calcNormFactors(dge)\n\ncondition <- factor(replicates_lookup[colnames(pseudobulk_matrix)])\ndesign <- model.matrix(~condition)\nvm  <- voom(dge, design = design, plot = FALSE)\nfit <- lmFit(vm, design = design)\nfit <- eBayes(fit)\nde_result_pseudobulk <- topTable(fit, n = Inf, adjust.method = \"BH\")\n#> Removing intercept from test coefficients\nde_result_pseudobulk <- arrange(de_result_pseudobulk , adj.P.Val)\nhead(de_result_pseudobulk)\n#>              logFC  AveExpr         t     P.Value adj.P.Val\n#> TPT1    0.20648390 12.53662  3.644878 0.004136289 0.9373156\n#> TMSB4X  0.08299091 14.00549  3.536492 0.004978817 0.9373156\n#> RPS16  -0.12982680 12.34490 -3.194506 0.008996126 0.9373156\n#> LTB    -0.35225848 10.95428 -3.415544 0.006131010 0.9373156\n#> B2M    -0.06086554 14.09869 -2.940815 0.014018110 0.9373156\n#> FTH1    0.16752649 11.33842  2.749742 0.019602056 0.9373156\n#>                B\n#> TPT1   -1.825526\n#> TMSB4X -2.059731\n#> RPS16  -2.454284\n#> LTB    -2.838411\n#> B2M    -3.110682\n#> FTH1   -3.244701\np1 <- ggplot(de_result_pseudobulk, aes(x=AveExpr, y=logFC, col=adj.P.Val < 0.05)) +\n  geom_point(col='black') +\n  theme_bw() +\n  ggtitle(\"Pseudobulk\")\n\n\np2 <- ggplot(de_result_pseudobulk, aes(x=logFC, y=-log10(P.Value), col=adj.P.Val < 0.05)) +\n  geom_point(col='black') +\n  theme_bw() +\n  ggtitle(\"Pseudobulk Test (Volcano)\")\n\np1 + p2"},{"path":"de2.html","id":"challenge-what-method","chapter":"11 Differential Expression","heading":"Challenge: What method?","text":"methods give different results. decide use? check individual gene?","code":""},{"path":"resources.html","id":"resources","chapter":"12 Resources","heading":"12 Resources","text":"Useful resources next steps.","code":""},{"path":"resources.html","id":"help-and-fruther-resources","chapter":"12 Resources","heading":"12.1 Help and fruther Resources","text":"","code":""},{"path":"resources.html","id":"seurat-vignettes","chapter":"12 Resources","heading":"Seurat Vignettes","text":"https://satijalab.org/seurat/index.htmlThere good many Seurat vigettes different aspects Seurat package. E.g.Guided Clustering tutorial : ’ve just worked thisDifferential expression : Exploration differential expression methods within SeuratData integration : Seurat’s data integration popular method combine different datasets one joint analysis.","code":""},{"path":"resources.html","id":"seurat-cheatsheet","chapter":"12 Resources","heading":"Seurat Cheatsheet","text":"https://satijalab.org/seurat/articles/essential_commands.htmlA useful resource asking; can ‘X’ seurat object?","code":""},{"path":"resources.html","id":"osca","chapter":"12 Resources","heading":"OSCA","text":"https://bioconductor.org/books/release/OSCA/comprehensive resource analysis approaches single cell data.\nuses SingleCellExperiment bioconductor ecosystem, alot principle still apply.includes good discussion useing pseudobulk approaches, worth checking differential expression analyses.","code":""},{"path":"resources.html","id":"mbp-training-reading-list","chapter":"12 Resources","heading":"MBP training Reading list","text":"https://monashbioinformaticsplatform.github.io/Single-Cell-Workshop/workshop page previous workshop (upon one based) run Monash Bioinformatics Platform - bottom \nextensive list useful single cell links resources.","code":""},{"path":"resources.html","id":"biocommons-single-cell-omics","chapter":"12 Resources","heading":"Biocommons Single Cell Omics","text":"https://www.biocommons.org.au/single-cell-omicsJoin single cell omics community resources setup biocommons.","code":""},{"path":"resources.html","id":"data","chapter":"12 Resources","heading":"12.2 Data","text":"","code":""},{"path":"resources.html","id":"demo-10x-data","chapter":"12 Resources","heading":"Demo 10X data","text":"https://www.10xgenomics.com/resources/datasets10X genomics quite example datasets availble download (including PBMC3k).\nuseful resource want see ‘raw’ data looks like particular technology.","code":""},{"path":"resources.html","id":"geo","chapter":"12 Resources","heading":"GEO","text":"https://www.ncbi.nlm.nih.gov/geo/Many papers publish raw single cell data GEO. Formats vary, often can find counts matrix.","code":""},{"path":"resources.html","id":"seurat-data","chapter":"12 Resources","heading":"Seurat data","text":"https://github.com/satijalab/seurat-dataPackage obtaining datasets seurat objects.","code":""},{"path":"resources.html","id":"analysis-tools","chapter":"12 Resources","heading":"12.3 Analysis Tools","text":"handful many tools might worth checking next steps.","code":""},{"path":"resources.html","id":"cyclone","chapter":"12 Resources","heading":"Cyclone","text":"https://pubmed.ncbi.nlm.nih.gov/26142758/Part scran package, cyclone (nother) method determining cell phase.\nDoco","code":""},{"path":"resources.html","id":"harmony","chapter":"12 Resources","heading":"Harmony","text":"https://portals.broadinstitute.org/harmony/articles/quickstart.htmlMethod integration multiple single cell datasets.","code":""},{"path":"resources.html","id":"singler-1","chapter":"12 Resources","heading":"SingleR","text":"http://bioconductor.org/books/release/SingleRBook/extensive documentation singleR package ‘singleR’ book.","code":""},{"path":"resources.html","id":"scrublet","chapter":"12 Resources","heading":"Scrublet","text":"https://github.com/swolock/scrubletA python based tool doublet detection. One many tools space.","code":""},{"path":"resources.html","id":"scvelo","chapter":"12 Resources","heading":"ScVelo","text":"https://scvelo.readthedocs.io/package single cell RNA velocity analysis, useful developmental/pseudotime trajectories. Python/scanpy based.","code":""},{"path":"resources.html","id":"monocle","chapter":"12 Resources","heading":"Monocle","text":"https://cole-trapnell-lab.github.io/monocle3/package single cell developmental//pseudotime trajectory analysis.","code":""},{"path":"resources.html","id":"tidyseurat","chapter":"12 Resources","heading":"TidySeurat","text":"https://stemangiola.github.io/tidyseurat/fans tidyverse-everything, ’s tidyseurat. Example workflow ","code":""},{"path":"resources.html","id":"preprocessing-tools","chapter":"12 Resources","heading":"12.4 Preprocessing Tools","text":"Tooks process raw sequencing data counts matricies","code":""},{"path":"resources.html","id":"cell-ranger","chapter":"12 Resources","heading":"Cell Ranger","text":"https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/--cell-rangerCellRanger 10X tool takes raw fastq sequence files produces counts matricies starting point today’s analysis. works 10X data.","code":""},{"path":"resources.html","id":"starsolo","chapter":"12 Resources","heading":"STARSolo","text":"STAR aligner (actually used within cell ranger). STARSolo tool producing counts matricies, configurable enough use multiple technologies.https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md","code":""}]
